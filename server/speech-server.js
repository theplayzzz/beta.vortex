const WebSocket = require('ws');
const speech = require('@google-cloud/speech');
const fs = require('fs');
const path = require('path');

// Carregar vari√°veis de ambiente do .env.local
const envPath = path.join(__dirname, '..', '.env.local');
if (fs.existsSync(envPath)) {
  const envContent = fs.readFileSync(envPath, 'utf8');
  envContent.split('\n').forEach(line => {
    if (line.trim() && !line.startsWith('#')) {
      const [key, ...valueParts] = line.split('=');
      if (key && valueParts.length > 0) {
        const value = valueParts.join('=').trim();
        process.env[key.trim()] = value;
      }
    }
  });
}

// Configurar credenciais do Google Cloud
const credentialsPath = process.env.GOOGLE_APPLICATION_CREDENTIALS;
if (!credentialsPath || !fs.existsSync(credentialsPath)) {
  console.error('‚ùå Arquivo de credenciais n√£o encontrado:', credentialsPath);
  console.error('üí° Verifique se o arquivo existe em:', path.resolve(credentialsPath || './config/speech-service-key.json'));
  process.exit(1);
}

console.log('‚úÖ Credenciais carregadas:', credentialsPath);
console.log('üéØ Projeto:', process.env.GOOGLE_CLOUD_PROJECT_ID);

// Cria√ß√£o do cliente Google Cloud Speech
let speechClient;
try {
  speechClient = new speech.SpeechClient({
    keyFilename: credentialsPath,
    projectId: process.env.GOOGLE_CLOUD_PROJECT_ID
  });
  console.log('‚úÖ Cliente Google Cloud Speech criado com sucesso');
} catch (error) {
  console.error('‚ùå Erro ao criar cliente Google Cloud:', error.message);
  process.exit(1);
}

// Configura√ß√£o do servidor WebSocket
const wss = new WebSocket.Server({ 
  port: 8080,
  perMessageDeflate: false 
});

console.log('üé§ Servidor de Speech-to-Text iniciado na porta 8080');

// üõ°Ô∏è PROTE√á√ÉO GLOBAL: Prevenir crash do servidor por erros n√£o tratados
process.on('uncaughtException', (error) => {
  console.error('üí• Erro n√£o tratado capturado:', error.message);
  console.error('üîç Stack trace:', error.stack);
  console.log('üîÑ Servidor continua rodando com seguran√ßa...');
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('üö® Promise rejeitada n√£o tratada:', reason);
  console.error('üîç Promise:', promise);
  console.log('üîÑ Servidor continua rodando com seguran√ßa...');
});

wss.on('connection', (ws) => {
  console.log('üîó Nova conex√£o WebSocket estabelecida');
  
  let recognizeStream = null;
  let streamStartTime = Date.now();
  const STREAM_LIMIT_MS = 58000; // 58s para ficar seguro dentro do limite de 60s do Google
  let restartTimeout = null;
  let isTranscriptionActive = false; // Controla se a transcri√ß√£o deve continuar ativa
  let lastRestartTime = 0; // Previne restarts muito frequentes
  const MIN_RESTART_INTERVAL = 5000; // M√≠nimo 5s entre restarts
  
  // üéØ TIMEOUT INTELIGENTE: Monitorar atividade da transcri√ß√£o
  let lastTranscriptionTime = Date.now();
  let lastInterimText = '';
  let stableTranscriptionCount = 0;
  const TRANSCRIPTION_STABILITY_THRESHOLD = 3; // 3 repeti√ß√µes = est√°vel
  const INACTIVITY_TIMEOUT = 8000; // 8s sem mudan√ßa = considerar est√°vel
  const MIN_SAFE_TIMEOUT = 45000; // 45s m√≠nimo antes de considerar timeout

  // Configura√ß√£o do reconhecimento de √°udio - STREAMING EST√ÅVEL
  const audioConfig = {
    encoding: 'LINEAR16',
    sampleRateHertz: 16000,
    languageCode: 'pt-BR', // Portugu√™s brasileiro
    enableAutomaticPunctuation: true,
    model: 'default',             // ‚Üê Modelo padr√£o mais est√°vel
    useEnhanced: true,            // ‚Üê Usar vers√£o melhorada
    maxAlternatives: 1,           // ‚Üê Menos alternativas = mais eficiente
    enableWordTimeOffsets: false, // ‚Üê Desabilitado para performance
    enableWordConfidence: false,  // ‚Üê Desabilitado para performance
    profanityFilter: false,       // ‚Üê Desabilitado para performance
  };

  const streamingConfig = {
    config: audioConfig,
    interimResults: true,
  };

  function startRecognitionStream() {
    const timeSinceLastRestart = Date.now() - lastRestartTime;
    console.log(`üöÄ Iniciando novo stream de reconhecimento (${timeSinceLastRestart}ms desde √∫ltimo restart)`);
    
    // Limpar stream anterior adequadamente
    if (recognizeStream) {
      console.log('üßπ Limpando stream anterior antes de criar novo');
      try {
        // Remover listeners para evitar vazamentos
        recognizeStream.removeAllListeners();
        
        // Finalizar stream apenas se ainda n√£o foi finalizado
        if (!recognizeStream.destroyed && !recognizeStream.writableEnded) {
          recognizeStream.end();
        }
      } catch (error) {
        console.error('‚ö†Ô∏è Erro ao limpar stream anterior:', error.message);
      }
      
      recognizeStream = null; // Limpar refer√™ncia
    }

    recognizeStream = speechClient
      .streamingRecognize(streamingConfig)
      .on('data', (data) => {
        if (data.results && data.results.length > 0) {
          const result = data.results[0];
          const transcript = result.alternatives[0].transcript;
          const isFinal = result.isFinal;
          const confidence = result.alternatives[0].confidence || 0;
          
          // Enviar resultado para o frontend
          if (isFinal) {
            console.log('‚úÖ Transcri√ß√£o final:', transcript);
            
            // üéØ RESET: Transcri√ß√£o final gerada - resetar monitoramento
            lastTranscriptionTime = Date.now();
            lastInterimText = '';
            stableTranscriptionCount = 0;
            
            ws.send(JSON.stringify({
              type: 'final',
              transcript: transcript,
              confidence: confidence
            }));
            
            // üéØ CORRE√á√ÉO: N√ÉO reiniciar stream ap√≥s resultado final
            // O stream deve permanecer ativo para transcri√ß√£o cont√≠nua fluida
            console.log('üéß Stream permanece ativo aguardando pr√≥xima fala (transcri√ß√£o cont√≠nua)');
          } else {
            console.log('üìù Transcri√ß√£o interim:', transcript);
            
            // üéØ MONITORAMENTO: Detectar estabilidade da transcri√ß√£o
            const currentTime = Date.now();
            
            if (transcript === lastInterimText) {
              stableTranscriptionCount++;
              console.log(`üîç Transcri√ß√£o est√°vel (${stableTranscriptionCount}/${TRANSCRIPTION_STABILITY_THRESHOLD}): "${transcript.substring(0, 50)}..."`);
            } else {
              // Transcri√ß√£o mudou - resetar contadores
              lastTranscriptionTime = currentTime;
              lastInterimText = transcript;
              stableTranscriptionCount = 0;
              console.log('üîÑ Transcri√ß√£o mudou - resetando monitoramento de estabilidade');
            }
            
            ws.send(JSON.stringify({
              type: 'interim',
              transcript: transcript,
              confidence: confidence
            }));
          }
        }
      })
      .on('error', (error) => {
        console.error('‚ùå Erro no reconhecimento:', error);
        ws.send(JSON.stringify({
          type: 'error',
          message: error.message
        }));
        
        // Tentar reconectar ap√≥s erro
        setTimeout(() => {
          if (ws.readyState === WebSocket.OPEN && isTranscriptionActive) {
            startRecognitionStream();
          }
        }, 1000);
      })
      .on('end', () => {
        const streamDuration = Date.now() - streamStartTime;
        console.log(`üìù Stream de reconhecimento finalizado (dura√ß√£o: ${streamDuration}ms)`);
        console.log(`üîç Evento 'end' disparado - verificando se deve reiniciar...`);
        
        // üîÑ VERIFICA√á√ïES PARA EVITAR LOOP INFINITO
        const timeSinceLastRestart = Date.now() - lastRestartTime;
        
        // üéØ MELHORIA: Verificar se j√° existe um listener espec√≠fico (timeout ou force-finalize)
        const hasSpecificHandler = recognizeStream && recognizeStream.listenerCount('end') > 1;
        
        const shouldRestart = isTranscriptionActive && 
                             ws.readyState === WebSocket.OPEN && 
                             timeSinceLastRestart >= MIN_RESTART_INTERVAL &&
                             streamDuration >= 1000 && // Stream deve durar pelo menos 1s
                             !hasSpecificHandler; // N√£o reiniciar se h√° handler espec√≠fico
        
        console.log(`üîç Condi√ß√µes para restart autom√°tico:`);
        console.log(`   - isTranscriptionActive: ${isTranscriptionActive}`);
        console.log(`   - ws.readyState === WebSocket.OPEN: ${ws.readyState === WebSocket.OPEN}`);
        console.log(`   - timeSinceLastRestart >= MIN_RESTART_INTERVAL: ${timeSinceLastRestart}ms >= ${MIN_RESTART_INTERVAL}ms = ${timeSinceLastRestart >= MIN_RESTART_INTERVAL}`);
        console.log(`   - streamDuration >= 1000: ${streamDuration}ms >= 1000ms = ${streamDuration >= 1000}`);
        console.log(`   - hasSpecificHandler: ${hasSpecificHandler}`);
        console.log(`   - shouldRestart: ${shouldRestart}`);
        
        if (shouldRestart) {
          console.log(`üîÑ Reiniciando stream automaticamente (√∫ltima tentativa h√° ${timeSinceLastRestart}ms)`);
          lastRestartTime = Date.now();
          setTimeout(() => {
            startRecognitionStream();
          }, 100);
        } else if (!isTranscriptionActive) {
          console.log('‚èπÔ∏è Transcri√ß√£o foi parada, n√£o reiniciando stream');
        } else if (timeSinceLastRestart < MIN_RESTART_INTERVAL) {
          console.log(`‚ö†Ô∏è Restart autom√°tico bloqueado - muito frequente (${timeSinceLastRestart}ms < ${MIN_RESTART_INTERVAL}ms)`);
        } else if (streamDuration < 1000) {
          console.log(`‚ö†Ô∏è Restart autom√°tico bloqueado - stream muito curto (${streamDuration}ms)`);
        } else if (hasSpecificHandler) {
          console.log(`‚ö†Ô∏è Restart autom√°tico bloqueado - handler espec√≠fico ativo`);
        }
      });

    streamStartTime = Date.now();
    
    // Configurar restart autom√°tico antes do limite
    if (restartTimeout) {
      clearTimeout(restartTimeout);
    }
    
    // üéØ TIMEOUT INTELIGENTE: Verificar periodicamente se deve aplicar timeout
    const checkSmartTimeout = () => {
      if (ws.readyState !== WebSocket.OPEN || !isTranscriptionActive) {
        return; // N√£o aplicar se n√£o estiver ativo
      }
      
      const streamAge = Date.now() - streamStartTime;
      const timeSinceLastActivity = Date.now() - lastTranscriptionTime;
      const isTranscriptionStable = stableTranscriptionCount >= TRANSCRIPTION_STABILITY_THRESHOLD;
      const hasMinimumAge = streamAge >= MIN_SAFE_TIMEOUT;
      const hasInactivity = timeSinceLastActivity >= INACTIVITY_TIMEOUT;
      
      console.log(`üîç Verifica√ß√£o de timeout inteligente:`);
      console.log(`   - Idade do stream: ${streamAge}ms (m√≠n: ${MIN_SAFE_TIMEOUT}ms)`);
      console.log(`   - Tempo desde √∫ltima atividade: ${timeSinceLastActivity}ms (m√≠n: ${INACTIVITY_TIMEOUT}ms)`);
      console.log(`   - Transcri√ß√£o est√°vel: ${isTranscriptionStable} (${stableTranscriptionCount}/${TRANSCRIPTION_STABILITY_THRESHOLD})`);
      console.log(`   - √öltima transcri√ß√£o: "${lastInterimText.substring(0, 50)}..."`);
      
      // Aplicar timeout apenas se TODAS as condi√ß√µes forem atendidas
      const shouldTimeout = hasMinimumAge && isTranscriptionStable && hasInactivity;
      
      if (shouldTimeout) {
        console.log('‚è∞ Timeout inteligente ativado - transcri√ß√£o est√°vel e inativa, for√ßando finaliza√ß√£o');
        applySmartRestart();
      } else if (streamAge >= STREAM_LIMIT_MS + 10000) {
        // Timeout de seguran√ßa ap√≥s 68s (58s + 10s extra)
        console.log('üö® Timeout de seguran√ßa ativado ap√≥s 68s - for√ßando restart');
        applySmartRestart();
      } else {
        // Continuar monitorando
        restartTimeout = setTimeout(checkSmartTimeout, 2000); // Verificar a cada 2s
      }
    };
    
    const applySmartRestart = () => {
      console.log('üîÑ Aplicando restart inteligente - tentando preservar contexto');
      
      // üéØ CORRE√á√ÉO: For√ßar resultados finais antes do restart
      if (recognizeStream && !recognizeStream.destroyed && !recognizeStream.writableEnded) {
        // Aguardar evento 'end' para reiniciar ap√≥s processar resultados finais
        const handleTimeLimitEnd = () => {
          console.log('‚úÖ Resultados finais processados ap√≥s timeout inteligente - reiniciando stream');
          recognizeStream.removeListener('end', handleTimeLimitEnd);
          
          if (ws.readyState === WebSocket.OPEN && isTranscriptionActive) {
            lastRestartTime = Date.now();
            startRecognitionStream();
          }
        };
        
        recognizeStream.once('end', handleTimeLimitEnd);
        
        // Encerrar stream limpo para for√ßar resultados finais
        console.log('üîÑ Encerrando stream atual para for√ßar processamento de resultados finais');
        recognizeStream.end();
      } else {
        // Stream j√° foi encerrado, reiniciar diretamente
        console.log('üîÑ Stream j√° encerrado - reiniciando diretamente');
        lastRestartTime = Date.now();
        startRecognitionStream();
      }
    };
    
    // Iniciar monitoramento inteligente
    restartTimeout = setTimeout(checkSmartTimeout, 2000); // Primeira verifica√ß√£o em 2s
  }

  // Manipular mensagens do frontend
  ws.on('message', (message) => {
    try {
      const data = JSON.parse(message);
      console.log('üì® Mensagem recebida do frontend:', data.type);
      
      switch (data.type) {
        case 'start':
          console.log('üéôÔ∏è Iniciando transcri√ß√£o CONT√çNUA');
          isTranscriptionActive = true; // Ativar transcri√ß√£o cont√≠nua
          lastRestartTime = Date.now(); // Inicializar controle de restart
          startRecognitionStream();
          ws.send(JSON.stringify({
            type: 'started',
            message: 'Transcri√ß√£o cont√≠nua iniciada no Google Cloud'
          }));
          break;
          
        case 'audio':
          if (recognizeStream && !recognizeStream.destroyed && !recognizeStream.writableEnded) {
            try {
              // Converter audio base64 para buffer e enviar para Google
              const audioBuffer = Buffer.from(data.audio, 'base64');
              recognizeStream.write(audioBuffer);
            } catch (error) {
              console.error('‚ùå Erro ao escrever √°udio no stream:', error.message);
              // Se o stream n√£o est√° mais dispon√≠vel, tentar reiniciar
              if (isTranscriptionActive && ws.readyState === WebSocket.OPEN) {
                console.log('üîÑ Reiniciando stream devido a erro de escrita');
                lastRestartTime = Date.now();
                startRecognitionStream();
              }
            }
          }
          break;
          
        case 'stop':
          console.log('‚èπÔ∏è Parando transcri√ß√£o CONT√çNUA - for√ßando resultados finais');
          isTranscriptionActive = false; // Desativar transcri√ß√£o cont√≠nua
          
          // Limpar timeout de restart
          if (restartTimeout) {
            clearTimeout(restartTimeout);
          }
          
          // üõ°Ô∏è PROTE√á√ÉO: Aplicar mesma l√≥gica do timeout para prevenir crash
          if (recognizeStream && !recognizeStream.destroyed && !recognizeStream.writableEnded) {
            // Adicionar handler espec√≠fico para erros durante encerramento
            const handleStopError = (error) => {
              console.error('‚ö†Ô∏è Erro durante encerramento seguro:', error.message);
              console.log('üîÑ Continuando encerramento apesar do erro...');
            };
            
            // Aguardar evento 'end' para processar resultados finais
            const handleStopEnd = () => {
              console.log('‚úÖ Resultados finais processados ap√≥s parada pelo usu√°rio');
              
              // Remover handlers espec√≠ficos
              if (recognizeStream) {
                recognizeStream.removeListener('end', handleStopEnd);
                recognizeStream.removeListener('error', handleStopError);
                recognizeStream.removeAllListeners();
              }
              
              recognizeStream = null;
              
              // Confirmar parada
              ws.send(JSON.stringify({
                type: 'stopped',
                message: 'Transcri√ß√£o parada - resultados finais processados'
              }));
            };
            
            // Timeout de seguran√ßa para prevenir travamento
            const stopTimeout = setTimeout(() => {
              console.log('‚ö†Ô∏è Timeout na parada - finalizando sem aguardar Google Cloud');
              
              if (recognizeStream) {
                recognizeStream.removeListener('end', handleStopEnd);
                recognizeStream.removeListener('error', handleStopError);
                recognizeStream.removeAllListeners();
              }
              
              recognizeStream = null;
              
              ws.send(JSON.stringify({
                type: 'stopped',
                message: 'Transcri√ß√£o parada (timeout de seguran√ßa)'
              }));
            }, 5000); // 5 segundos m√°ximo
            
            // Adicionar handlers tempor√°rios
            recognizeStream.once('error', handleStopError);
            recognizeStream.once('end', () => {
              clearTimeout(stopTimeout);
              handleStopEnd();
            });
            
            // Enviar sinal de parada para Google Cloud
            console.log('üîÑ Encerrando stream com seguran√ßa - aguardando evento end');
            try {
              recognizeStream.end();
            } catch (error) {
              console.error('‚ùå Erro ao encerrar stream:', error.message);
              // Disparar handler manualmente em caso de erro
              clearTimeout(stopTimeout);
              handleStopEnd();
            }
          } else {
            // Stream j√° foi encerrado ou n√£o existe
            console.log('‚ö†Ô∏è Stream j√° encerrado ou n√£o dispon√≠vel');
            recognizeStream = null;
            ws.send(JSON.stringify({
              type: 'stopped',
              message: 'Transcri√ß√£o parada (stream j√° encerrado)'
            }));
          }
          break;

        case 'force-finalize':
          console.log('üß† For√ßando finaliza√ß√£o para an√°lise de contexto');
          console.log('üîç Estado atual - recognizeStream existe:', !!recognizeStream);
          console.log('üîç Estado atual - isTranscriptionActive:', isTranscriptionActive);
          
          // Se transcri√ß√£o est√° ativa mas stream n√£o existe (em restart), aguardar
          if (isTranscriptionActive && ws.readyState === WebSocket.OPEN && !recognizeStream) {
            console.log('‚è≥ Stream em processo de restart, aguardando...');
            
            // Aguardar at√© 2 segundos pelo stream
            let waitCount = 0;
            const maxWait = 20; // 20 * 100ms = 2 segundos
            
            const waitForStream = setInterval(() => {
              waitCount++;
              
              if (recognizeStream) {
                clearInterval(waitForStream);
                console.log('‚úÖ Stream dispon√≠vel, processando force-finalize');
                // Processar force-finalize normalmente
                processForceFinalize();
              } else if (waitCount >= maxWait) {
                clearInterval(waitForStream);
                console.log('‚ö†Ô∏è Timeout aguardando stream');
                ws.send(JSON.stringify({
                  type: 'force-finalize-error',
                  message: 'Stream n√£o dispon√≠vel ap√≥s timeout'
                }));
              }
            }, 100);
            
            break;
          }
          
          if (isTranscriptionActive && ws.readyState === WebSocket.OPEN && recognizeStream) {
            processForceFinalize();
          } else {
            console.log('‚ö†Ô∏è Condi√ß√µes n√£o atendidas para force-finalize');
            console.log('   - isTranscriptionActive:', isTranscriptionActive);
            console.log('   - ws.readyState === WebSocket.OPEN:', ws.readyState === WebSocket.OPEN);
            console.log('   - recognizeStream existe:', !!recognizeStream);
            
            ws.send(JSON.stringify({
              type: 'force-finalize-error',
              message: 'Condi√ß√µes n√£o atendidas para for√ßar finaliza√ß√£o'
            }));
          }
          
          function processForceFinalize() {
            // Enviar confirma√ß√£o para frontend
            ws.send(JSON.stringify({
              type: 'force-finalize-started',
              message: 'For√ßando finaliza√ß√£o - aguardando evento end'
            }));
            
            // ‚≠ê NOVA ABORDAGEM: Aguardar evento 'end' para reiniciar
            console.log('üîÑ Finalizando stream atual e aguardando evento end para restart');
            
            // Listener √∫nico para este force-finalize
            const handleForcedEnd = () => {
              console.log('üìù Evento end recebido ap√≥s force-finalize - reiniciando agora');
              
              // Remover este listener
              if (recognizeStream) {
                recognizeStream.removeListener('end', handleForcedEnd);
              }
              
              // Reiniciar imediatamente sem verificar MIN_RESTART_INTERVAL
              if (ws.readyState === WebSocket.OPEN && isTranscriptionActive) {
                console.log('üöÄ Reiniciando stream ap√≥s force-finalize (bypass MIN_RESTART_INTERVAL)');
                lastRestartTime = Date.now();
                startRecognitionStream();
                
                // Confirmar reinicio
                setTimeout(() => {
                  if (ws.readyState === WebSocket.OPEN && isTranscriptionActive) {
                    console.log('‚úÖ Finaliza√ß√£o for√ßada conclu√≠da - stream reiniciado ap√≥s evento end');
                    ws.send(JSON.stringify({
                      type: 'force-finalize-completed',
                      message: 'Stream reiniciado ap√≥s finaliza√ß√£o for√ßada'
                    }));
                  }
                }, 100);
              }
            };
            
            // Adicionar listener tempor√°rio para este force-finalize
            recognizeStream.once('end', handleForcedEnd);
            
            // Finalizar stream atual (isso dispara evento 'end')
            console.log('üì§ Finalizando stream atual - isso deve disparar evento end');
            try {
              if (!recognizeStream.destroyed && !recognizeStream.writableEnded) {
                recognizeStream.end();
              } else {
                console.log('‚ö†Ô∏è Stream j√° finalizado, disparando evento manualmente');
                // Se o stream j√° foi finalizado, disparar o handler manualmente
                handleForcedEnd();
              }
            } catch (error) {
              console.error('‚ùå Erro ao finalizar stream no force-finalize:', error.message);
              // Em caso de erro, disparar handler para continuar o processo
              handleForcedEnd();
            }
          }
          break;
      }
    } catch (error) {
      console.error('‚ùå Erro ao processar mensagem:', error);
      ws.send(JSON.stringify({
        type: 'error',
        message: 'Erro ao processar mensagem'
      }));
    }
  });

  // Limpar recursos quando conex√£o √© fechada
  ws.on('close', () => {
    console.log('üîå Conex√£o WebSocket fechada');
    isTranscriptionActive = false; // Desativar transcri√ß√£o cont√≠nua
    
    // Limpar timeout de restart
    if (restartTimeout) {
      clearTimeout(restartTimeout);
    }
    
    // üõ°Ô∏è PROTE√á√ÉO: Limpeza segura durante desconex√£o
    if (recognizeStream) {
      try {
        console.log('üßπ Limpando stream ao fechar conex√£o com seguran√ßa');
        
        // Adicionar handler para erro durante limpeza
        const handleCloseError = (error) => {
          console.error('‚ö†Ô∏è Erro durante limpeza na desconex√£o:', error.message);
          console.log('üîÑ Continuando limpeza apesar do erro...');
        };
        
        recognizeStream.once('error', handleCloseError);
        
        // Remover listeners e finalizar stream
        recognizeStream.removeAllListeners();
        recognizeStream.removeListener('error', handleCloseError);
        
        if (!recognizeStream.destroyed && !recognizeStream.writableEnded) {
          recognizeStream.end();
        }
      } catch (error) {
        console.error('‚ö†Ô∏è Erro ao limpar stream no fechamento:', error.message);
      }
      recognizeStream = null;
    }
  });

  // Enviar confirma√ß√£o de conex√£o
  ws.send(JSON.stringify({
    type: 'connected',
    message: 'Conectado ao servidor de Speech-to-Text'
  }));
});

// Tratamento de erros do servidor
wss.on('error', (error) => {
  console.error('‚ùå Erro no servidor WebSocket:', error);
});

process.on('SIGINT', () => {
  console.log('üõë Encerrando servidor...');
  wss.close();
  process.exit();
}); 