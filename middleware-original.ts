import { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server'
import { NextResponse } from 'next/server'

// Definir rotas p√∫blicas que n√£o precisam de autentica√ß√£o
const isPublicRoute = createRouteMatcher([
  '/sign-in(.*)',
  '/sign-up(.*)',
  '/api/webhooks(.*)',
  '/api/proposals/webhook',
  '/api/health',
  '/api/debug(.*)',
  '/api/external(.*)', // APIs externas com autentica√ß√£o via API key
  '/pending-approval',
  '/account-rejected',
  '/account-suspended'
])

// APIs que devem retornar JSON errors em vez de redirecionar
const isApiRoute = createRouteMatcher([
  '/api/(.*)'
])

// Rotas que s√£o acess√≠veis apenas para admins
const isAdminRoute = createRouteMatcher([
  '/admin(.*)',
  '/api/admin(.*)'  // Incluir APIs de admin tamb√©m
])

export default clerkMiddleware(async (auth, req) => {
  const currentPath = req.nextUrl.pathname
  
  // ‚ö° OTIMIZA√á√ÉO: Pular processamento para rotas est√°ticas e APIs espec√≠ficas
  if (currentPath.startsWith('/_next') || 
      currentPath.includes('.') ||
      currentPath.startsWith('/api/webhooks') ||
      currentPath.startsWith('/api/external') ||
      currentPath.startsWith('/api/health')) {
    return NextResponse.next()
  }

  // ‚ö° ULTRA-FAST: Verificar autentica√ß√£o usando apenas sessionClaims (sem API calls)
  let userId = null
  let sessionClaims = null
  let isAuthenticated = false
  
  try {
    const authResult = auth()
    userId = authResult.userId
    sessionClaims = authResult.sessionClaims
    isAuthenticated = !!userId
  } catch (error) {
    // Em caso de erro de auth, permitir acesso apenas a rotas p√∫blicas
    if (isPublicRoute(req)) {
      return NextResponse.next()
    }
    
    // Para APIs, retornar erro JSON
    if (isApiRoute(req)) {
      return NextResponse.json(
        { error: 'Erro de autentica√ß√£o' },
        { status: 401 }
      )
    }
    
    const signInUrl = new URL('/sign-in', req.url)
    signInUrl.searchParams.set('redirect_url', req.url)
    return NextResponse.redirect(signInUrl)
  }

  // Se n√£o autenticado e rota n√£o √© p√∫blica
  if (!userId && !isPublicRoute(req)) {
    // Para APIs, retornar erro JSON em vez de redirecionar
    if (isApiRoute(req)) {
      return NextResponse.json(
        { error: 'N√£o autorizado - Login necess√°rio' },
        { status: 401 }
      )
    }
    
    const signInUrl = new URL('/sign-in', req.url)
    signInUrl.searchParams.set('redirect_url', req.url)
    return NextResponse.redirect(signInUrl)
  }

  // ‚ö° ULTRA-FAST: Se autenticado, usar APENAS sessionClaims (sem DB queries, sem API calls)
  if (userId) {
    // Extrair dados diretamente do sessionClaims para m√°xima performance
    const publicMetadata = (sessionClaims?.publicMetadata as any) || {}
    const approvalStatus = publicMetadata.approvalStatus || 'PENDING'
    const userRole = publicMetadata.role || 'USER'
    const isAdmin = userRole === 'ADMIN' || userRole === 'SUPER_ADMIN'
    
    // üîç DEBUG: Log detalhado para identificar problema
    console.log('[MIDDLEWARE DEBUG]', {
      userId,
      currentPath,
      hasSessionClaims: !!sessionClaims,
      publicMetadata,
      approvalStatus,
      userRole,
      isAdmin,
      timestamp: new Date().toISOString()
    })
    
    // ‚ö° PERFORMANCE LOG: Log apenas em desenvolvimento e sem dados sens√≠veis
    if (process.env.NODE_ENV === 'development') {
      console.log(`[MIDDLEWARE] Fast Path - Role: ${userRole}, Status: ${approvalStatus}, Path: ${currentPath}`)
    }
    
    // ‚ö° ULTRA-FAST: Verifica√ß√£o de admin instant√¢nea
    if (isAdminRoute(req) && !isAdmin) {
      // Para APIs de admin, retornar erro JSON
      if (isApiRoute(req)) {
        return NextResponse.json(
          { error: 'Acesso negado - Apenas administradores' },
          { status: 403 }
        )
      }
      
      console.log('[MIDDLEWARE] Redirecionando n√£o-admin de rota admin:', { userId, currentPath, userRole })
      return NextResponse.redirect(new URL('/', req.url))
    }

    // ‚ö° ULTRA-FAST: Admins t√™m acesso instant√¢neo a tudo
    if (isAdmin) {
      // Se admin est√° em p√°gina de pending, redirecionar para home
      if (currentPath === '/pending-approval') {
        console.log('[MIDDLEWARE] Redirecionando admin de pending-approval para home:', { userId, userRole })
        return NextResponse.redirect(new URL('/', req.url))
      }
      
      // Admins t√™m acesso livre a tudo sem headers extras para performance
      return NextResponse.next()
    }

    // ‚ö° ULTRA-FAST: Para n√£o-admins, verifica√ß√£o instant√¢nea de status baseada em sessionClaims
    if (!isPublicRoute(req)) {
      console.log('[MIDDLEWARE] Verificando status de aprova√ß√£o:', { 
        userId, 
        approvalStatus, 
        currentPath,
        isPublicRoute: isPublicRoute(req)
      })
      
      switch (approvalStatus) {
        case 'APPROVED':
          // Usu√°rios aprovados: se est√£o em p√°ginas de estado, redirecionar para home
          if (['/pending-approval', '/account-rejected', '/account-suspended'].includes(currentPath)) {
            console.log('[MIDDLEWARE] Redirecionando usu√°rio aprovado de p√°gina de status para home:', { 
              userId, 
              approvalStatus, 
              currentPath 
            })
            return NextResponse.redirect(new URL('/', req.url))
          }
          console.log('[MIDDLEWARE] Usu√°rio aprovado acessando rota protegida:', { userId, currentPath })
          break

        case 'REJECTED':
          if (currentPath !== '/account-rejected') {
            console.log('[MIDDLEWARE] Redirecionando usu√°rio rejeitado para account-rejected:', { userId, currentPath })
            return NextResponse.redirect(new URL('/account-rejected', req.url))
          }
          break

        case 'SUSPENDED':
          if (currentPath !== '/account-suspended') {
            console.log('[MIDDLEWARE] Redirecionando usu√°rio suspenso para account-suspended:', { userId, currentPath })
            return NextResponse.redirect(new URL('/account-suspended', req.url))
          }
          break

        case 'PENDING':
        default:
          // Usu√°rios pending ou sem status: redirecionar para pending-approval
          if (currentPath !== '/pending-approval') {
            console.log('[MIDDLEWARE] Redirecionando usu√°rio pendente para pending-approval:', { 
              userId, 
              approvalStatus, 
              currentPath,
              publicMetadata 
            })
            return NextResponse.redirect(new URL('/pending-approval', req.url))
          }
          break
      }
    }

    // ‚ö° ULTRA-FAST: Retorno sem headers extras para performance m√°xima
    return NextResponse.next()
  }

  return NextResponse.next()
})

export const config = {
  matcher: [
    // Incluir todas as rotas exceto arquivos est√°ticos
    '/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',
  ],
} 