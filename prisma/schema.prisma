generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model AgentInteraction {
  id           String         @id @default(cuid())
  title        String?
  clientId     String
  userId       String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  Client       Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  User         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  AgentMessage AgentMessage[]

  @@index([clientId])
  @@index([userId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model AgentMessage {
  id                 String           @id @default(cuid())
  content            String
  role               MessageRole
  agentInteractionId String
  createdAt          DateTime         @default(now())
  AgentInteraction   AgentInteraction @relation(fields: [agentInteractionId], references: [id], onDelete: Cascade)

  @@index([agentInteractionId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Client {
  id                      String               @id @default(cuid())
  name                    String
  industry                String?
  serviceOrProduct        String?
  initialObjective        String?
  contactEmail            String?
  contactPhone            String?
  website                 String?
  address                 String?
  businessDetails         String?
  targetAudience          String?
  marketingObjectives     String?
  historyAndStrategies    String?
  challengesOpportunities String?
  competitors             String?
  resourcesBudget         String?
  toneOfVoice             String?
  preferencesRestrictions String?
  richnessScore           Int                  @default(0)
  userId                  String
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  deletedAt               DateTime?
  isViewed                Boolean              @default(false)
  AgentInteraction        AgentInteraction[]
  User                    User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  ClientAttachment        ClientAttachment[]
  ClientNote              ClientNote[]
  CommercialProposal      CommercialProposal[]
  PlanningTask            PlanningTask[]
  StrategicPlanning       StrategicPlanning[]

  @@index([deletedAt])
  @@index([userId])
  @@index([userId, deletedAt, createdAt(sort: Desc)])
  @@index([userId, name])
  @@index([userId, industry, richnessScore])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ClientAttachment {
  id        String   @id @default(cuid())
  fileName  String
  fileUrl   String
  fileType  String
  sizeBytes Int?
  clientId  String
  userId    String
  createdAt DateTime @default(now())
  Client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([userId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ClientNote {
  id        String   @id @default(cuid())
  content   String
  clientId  String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime
  Client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([userId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model CommercialProposal {
  id                 String         @id @default(cuid())
  title              String
  generatedContent   String?
  status             ProposalStatus @default(DRAFT)
  version            Int            @default(1)
  clientId           String?
  userId             String
  createdAt          DateTime       @default(now())
  updatedAt          DateTime
  aiGeneratedContent Json?
  aiMetadata         Json?
  clientSnapshot     Json?
  formDataJSON       Json?
  proposalHtml       String?
  proposalMarkdown   String?
  usedPlanAllowance  Boolean        @default(false)
  Client             Client?        @relation(fields: [clientId], references: [id])
  User               User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([userId])
  @@index([userId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model CreditTransaction {
  id                String                @id @default(cuid())
  amount            Int
  type              CreditTransactionType
  description       String?
  userId            String
  relatedEntityId   String?
  relatedEntityType String?
  createdAt         DateTime              @default(now())
  User              User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([type])
  @@index([userId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model PlanningTask {
  id                                 String             @id @default(cuid())
  title                              String
  description                        String?
  status                             TaskStatus         @default(TODO)
  priority                           TaskPriority       @default(MEDIUM)
  startDate                          DateTime?
  endDate                            DateTime?
  effortEstimate                     String?
  strategicPlanningId                String?
  clientId                           String?
  ownerId                            String
  assigneeId                         String?
  parentId                           String?
  createdAt                          DateTime           @default(now())
  updatedAt                          DateTime
  User_PlanningTask_assigneeIdToUser User?              @relation("PlanningTask_assigneeIdToUser", fields: [assigneeId], references: [id])
  Client                             Client?            @relation(fields: [clientId], references: [id])
  User_PlanningTask_ownerIdToUser    User               @relation("PlanningTask_ownerIdToUser", fields: [ownerId], references: [id], onDelete: Cascade)
  PlanningTask                       PlanningTask?      @relation("PlanningTaskToPlanningTask", fields: [parentId], references: [id])
  other_PlanningTask                 PlanningTask[]     @relation("PlanningTaskToPlanningTask")
  StrategicPlanning                  StrategicPlanning? @relation(fields: [strategicPlanningId], references: [id])
  TaskAttachment                     TaskAttachment[]
  TaskComment                        TaskComment[]

  @@index([assigneeId])
  @@index([clientId])
  @@index([ownerId])
  @@index([parentId])
  @@index([strategicPlanningId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model SalesArgument {
  id                String   @id @default(cuid())
  title             String
  script            String?
  objectionsHandled Json?
  category          String?
  userId            String
  createdAt         DateTime @default(now())
  updatedAt         DateTime
  User              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([category])
  @@index([userId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model StrategicPlanning {
  id                 String         @id @default(cuid())
  title              String
  description        String?
  specificObjectives String?
  scope              String?
  successMetrics     String?
  budget             String?
  toneOfVoice        String?
  status             PlanningStatus @default(DRAFT)
  clientId           String
  userId             String
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  clientSnapshot     Json?
  formDataJSON       Json?
  usedPlanAllowance  Boolean        @default(false)
  PlanningTask       PlanningTask[]
  Client             Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  User               User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([userId])
  @@index([userId, clientId])
  @@index([userId, status])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model TaskAttachment {
  id           String       @id @default(cuid())
  fileName     String
  fileUrl      String
  fileType     String
  sizeBytes    Int?
  taskId       String
  userId       String
  createdAt    DateTime     @default(now())
  PlanningTask PlanningTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  User         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([userId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model TaskComment {
  id           String       @id @default(cuid())
  content      String
  taskId       String
  userId       String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime
  PlanningTask PlanningTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  User         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([userId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model User {
  id                                         String                 @id @default(cuid())
  clerkId                                    String                 @unique
  email                                      String                 @unique
  firstName                                  String?
  lastName                                   String?
  profileImageUrl                            String?
  creditBalance                              Int                    @default(0)
  createdAt                                  DateTime               @default(now())
  updatedAt                                  DateTime
  approvalStatus                             ApprovalStatus         @default(PENDING)
  approvedAt                                 DateTime?
  approvedBy                                 String?
  rejectedAt                                 DateTime?
  rejectedBy                                 String?
  rejectionReason                            String?
  version                                    Int                    @default(0)
  role                                       UserRole               @default(USER)
  AgentInteraction                           AgentInteraction[]
  Client                                     Client[]
  ClientAttachment                           ClientAttachment[]
  ClientNote                                 ClientNote[]
  CommercialProposal                         CommercialProposal[]
  CreditTransaction                          CreditTransaction[]
  PlanningTask_PlanningTask_assigneeIdToUser PlanningTask[]         @relation("PlanningTask_assigneeIdToUser")
  PlanningTask_PlanningTask_ownerIdToUser    PlanningTask[]         @relation("PlanningTask_ownerIdToUser")
  SalesArgument                              SalesArgument[]
  StrategicPlanning                          StrategicPlanning[]
  TaskAttachment                             TaskAttachment[]
  TaskComment                                TaskComment[]
  TranscriptionSession                       TranscriptionSession[]
  UserPlan                                   UserPlan[]
  UsageMonthly                               UsageMonthly[]
  UsageOverride                              UsageOverride[]
  UsageOverrideGranted                       UsageOverride[]        @relation("UsageOverride_grantedBy")
  UsageEvent                                 UsageEvent[]
  ModerationActions                          UserModerationLog[]    @relation("UserModerationLog_moderatorId")
  ModeratedUsers                             UserModerationLog[]    @relation("UserModerationLog_userId")

  @@index([approvalStatus])
  @@index([approvalStatus, createdAt])
  @@index([approvedBy])
  @@index([rejectedBy])
}

/// 🆕 MODELO PARA AUDIT TRAIL DO SISTEMA DE APROVAÇÃO (Plan-018)
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model UserModerationLog {
  id             String           @id @default(cuid())
  userId         String
  moderatorId    String
  action         ModerationAction
  previousStatus ApprovalStatus
  newStatus      ApprovalStatus
  reason         String?
  metadata       Json?
  createdAt      DateTime         @default(now())
  Moderator      User             @relation("UserModerationLog_moderatorId", fields: [moderatorId], references: [id], onDelete: Cascade)
  User           User             @relation("UserModerationLog_userId", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([moderatorId])
  @@index([action])
  @@index([createdAt])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model TranscriptionSession {
  id                  String    @id @default(cuid())
  sessionName         String
  companyName         String
  industry            String
  customIndustry      String?
  revenue             String?
  agentType           AgentType
  spinQuestions       Json?
  connectTime         DateTime?
  totalDuration       Int       @default(0)
  analysisCount       Int       @default(0)
  analyses            Json?
  userId              String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  activeParticipantId String?
  connectionCount     Int       @default(0)
  isActive            Boolean   @default(false)
  lastDisconnectAt    DateTime?
  webhookEvents       Json      @default("[]")
  deletedAt           DateTime?
  usedPlanAllowance   Boolean   @default(false)
  User                User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([deletedAt])
  @@index([userId])
  @@index([userId, deletedAt, createdAt(sort: Desc)])
  @@index([sessionName])
  @@index([agentType])
  @@index([userId, agentType])
  @@index([isActive])
  @@index([activeParticipantId])
}

enum CreditTransactionType {
  PURCHASE
  CONSUMPTION_PLANNING_INITIAL
  CONSUMPTION_PLANNING_DETAILED
  CONSUMPTION_AGENT_IA_MESSAGE
  CONSUMPTION_PROPOSAL_GENERATION
  CONSUMPTION_TASK_IA_ASSIST
  CONSUMPTION_SALES_ARGUMENT_IA
  CONSUMPTION_MEETING_INSIGHTS_IA
  CONSUMPTION_PITCH_ANALYSIS_IA
  ADJUSTMENT_ADMIN
  INITIAL_GRANT
}

enum MessageRole {
  USER
  AI
}

enum PlanningStatus {
  AWAITING_APPROVAL
  GENERATING_REFINED
  REFINED_COMPLETED
  DRAFT
  ACTIVE
  COMPLETED
  ARCHIVED
  PENDING_AI_BACKLOG_GENERATION
  AI_BACKLOG_VISIBLE
  PENDING_AI_REFINED_LIST
  AI_REFINED_LIST_VISIBLE
}

enum ProposalStatus {
  DRAFT
  SENT
  VIEWED
  ACCEPTED
  REJECTED
  NEGOTIATION
  ARCHIVED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
  BLOCKED
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum ModerationAction {
  APPROVE
  REJECT
  SUSPEND
  UNSUSPEND
  RESET_TO_PENDING
  UNSUSPEND_TO_APPROVED
  UNSUSPEND_TO_PENDING
}

enum AgentType {
  GENERALISTA
  ESPECIALISTA
}

enum PlanType {
  MONTHLY
  QUARTERLY
  SEMIANNUAL
  ANNUAL
}

enum OverrideType {
  BONUS
  PENALTY
  ADMIN_ADJUSTMENT
  PROMOTION
}

enum FeatureType {
  PLANNING
  TRANSCRIPTION
  PROPOSAL
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Plan {
  id                      String   @id @default(cuid())
  name                    String
  description             String?
  maxPlanningsMonth       Int
  maxTranscriptionMinMonth Int
  maxProposalsMonth       Int
  planType                PlanType @default(MONTHLY)
  durationMonths          Int      @default(1)
  isActive                Boolean  @default(true)
  displayOrder            Int      @default(0)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  UserPlan                UserPlan[]

  @@index([isActive])
  @@index([displayOrder])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model UserPlan {
  id           String    @id @default(cuid())
  userId       String
  planId       String
  startsAt     DateTime  @default(now())
  endsAt       DateTime?
  canceledAt   DateTime?
  cancelReason String?
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  User         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Plan         Plan      @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@unique([userId, isActive], name: "one_active_plan_per_user")
  @@index([userId])
  @@index([planId])
  @@index([isActive])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model UsageMonthly {
  id                              String   @id @default(cuid())
  userId                          String
  periodMonth                     String   // "2024-09"
  usedPlannings                   Int      @default(0)
  limitSnapshotPlannings          Int      @default(0)
  usedTranscriptionMinutes        Int      @default(0)
  limitSnapshotTranscriptionMinutes Int    @default(0)
  usedProposals                   Int      @default(0)
  limitSnapshotProposals          Int      @default(0)
  bonusPlannings                  Int      @default(0)
  bonusTranscriptionMinutes       Int      @default(0)
  bonusProposals                  Int      @default(0)
  createdAt                       DateTime @default(now())
  updatedAt                       DateTime @updatedAt
  User                            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, periodMonth])
  @@index([userId])
  @@index([periodMonth])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model UsageOverride {
  id                        String       @id @default(cuid())
  userId                    String
  periodMonth               String       // "2024-09"
  overrideType              OverrideType
  reason                    String?
  extraPlannings            Int          @default(0)
  extraTranscriptionMinutes Int          @default(0)
  extraProposals            Int          @default(0)
  grantedBy                 String
  expiresAt                 DateTime?
  isActive                  Boolean      @default(true)
  createdAt                 DateTime     @default(now())
  updatedAt                 DateTime     @updatedAt
  User                      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  GrantedBy                 User         @relation("UsageOverride_grantedBy", fields: [grantedBy], references: [id])

  @@index([userId])
  @@index([periodMonth])
  @@index([overrideType])
  @@index([isActive])
  @@index([expiresAt])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model UsageEvent {
  id                 String      @id @default(cuid())
  userId             String
  featureType        FeatureType
  amount             Int
  periodMonth        String      // "2024-09"
  limitAtTime        Int
  usedBeforeEvent    Int
  wasBlocked         Boolean     @default(false)
  relatedEntityId    String?
  relatedEntityType  String?
  metadata           Json?
  createdAt          DateTime    @default(now())
  User               User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([featureType])
  @@index([periodMonth])
  @@index([createdAt])
  @@index([wasBlocked])
  @@index([relatedEntityId])
}
