generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                  String               @id @default(cuid())
  clerkId             String               @unique
  email               String               @unique
  firstName           String?
  lastName            String?
  profileImageUrl     String?
  creditBalance       Int                  @default(0)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  agentInteractions   AgentInteraction[]
  clients             Client[]
  clientAttachments   ClientAttachment[]
  clientNotes         ClientNote[]
  commercialProposals CommercialProposal[]
  creditTransactions  CreditTransaction[]
  tasksAssigned       PlanningTask[]       @relation("AssignedTasks")
  tasksOwned          PlanningTask[]       @relation("OwnedTasks")
  salesArguments      SalesArgument[]
  strategicPlannings  StrategicPlanning[]
  taskAttachments     TaskAttachment[]
  taskComments        TaskComment[]
}

model Client {
  id                      String               @id @default(cuid())
  name                    String
  industry                String?
  serviceOrProduct        String?
  initialObjective        String?
  contactEmail            String?
  contactPhone            String?
  website                 String?
  address                 String?
  businessDetails         String?
  targetAudience          String?
  marketingObjectives     String?
  historyAndStrategies    String?
  challengesOpportunities String?
  competitors             String?
  resourcesBudget         String?
  toneOfVoice             String?
  preferencesRestrictions String?
  richnessScore           Int                  @default(0)
  userId                  String
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  deletedAt               DateTime?
  isViewed                Boolean              @default(false)
  agentInteractions       AgentInteraction[]
  user                    User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  attachments             ClientAttachment[]
  notes                   ClientNote[]
  commercialProposals     CommercialProposal[]
  tasks                   PlanningTask[]
  strategicPlannings      StrategicPlanning[]

  @@index([userId])
  @@index([deletedAt])
}

model ClientNote {
  id        String   @id @default(cuid())
  content   String
  clientId  String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([userId])
}

model ClientAttachment {
  id        String   @id @default(cuid())
  fileName  String
  fileUrl   String
  fileType  String
  sizeBytes Int?
  clientId  String
  userId    String
  createdAt DateTime @default(now())
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([userId])
}

model StrategicPlanning {
  id                 String         @id @default(cuid())
  title              String
  description        String?
  specificObjectives String?
  scope              String?
  successMetrics     String?
  budget             String?
  toneOfVoice        String?
  status             PlanningStatus @default(DRAFT)
  clientId           String
  userId             String
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  planningTasks      PlanningTask[]
  client             Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user               User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([userId])
}

model PlanningTask {
  id                  String             @id @default(cuid())
  title               String
  description         String?
  status              TaskStatus         @default(TODO)
  priority            TaskPriority       @default(MEDIUM)
  startDate           DateTime?
  endDate             DateTime?
  effortEstimate      String?
  strategicPlanningId String?
  clientId            String?
  ownerId             String
  assigneeId          String?
  parentId            String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  assignee            User?              @relation("AssignedTasks", fields: [assigneeId], references: [id])
  client              Client?            @relation(fields: [clientId], references: [id])
  owner               User               @relation("OwnedTasks", fields: [ownerId], references: [id], onDelete: Cascade)
  parentTask          PlanningTask?      @relation("SubTasks", fields: [parentId], references: [id])
  subTasks            PlanningTask[]     @relation("SubTasks")
  strategicPlanning   StrategicPlanning? @relation(fields: [strategicPlanningId], references: [id])
  attachments         TaskAttachment[]
  comments            TaskComment[]

  @@index([strategicPlanningId])
  @@index([clientId])
  @@index([ownerId])
  @@index([assigneeId])
  @@index([parentId])
}

model TaskComment {
  id        String       @id @default(cuid())
  content   String
  taskId    String
  userId    String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  task      PlanningTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([userId])
}

model TaskAttachment {
  id        String       @id @default(cuid())
  fileName  String
  fileUrl   String
  fileType  String
  sizeBytes Int?
  taskId    String
  userId    String
  createdAt DateTime     @default(now())
  task      PlanningTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([userId])
}

model AgentInteraction {
  id        String         @id @default(cuid())
  title     String?
  clientId  String
  userId    String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  client    Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  AgentMessage[]

  @@index([clientId])
  @@index([userId])
}

model AgentMessage {
  id                 String           @id @default(cuid())
  content            String
  role               MessageRole
  agentInteractionId String
  createdAt          DateTime         @default(now())
  agentInteraction   AgentInteraction @relation(fields: [agentInteractionId], references: [id], onDelete: Cascade)

  @@index([agentInteractionId])
}

model CommercialProposal {
  id               String         @id @default(cuid())
  title            String
  generatedContent String?
  status           ProposalStatus @default(DRAFT)
  version          Int            @default(1)
  clientId         String?
  userId           String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  client           Client?        @relation(fields: [clientId], references: [id])
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([userId])
}

model SalesArgument {
  id                String   @id @default(cuid())
  title             String
  script            String?
  objectionsHandled Json?
  category          String?
  userId            String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([category])
}

model CreditTransaction {
  id                String                @id @default(cuid())
  amount            Int
  type              CreditTransactionType
  description       String?
  userId            String
  relatedEntityId   String?
  relatedEntityType String?
  createdAt         DateTime              @default(now())
  user              User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
}

enum PlanningStatus {
  DRAFT
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
  BLOCKED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum MessageRole {
  USER
  AI
}

enum ProposalStatus {
  DRAFT
  SENT
  VIEWED
  ACCEPTED
  REJECTED
  NEGOTIATION
  ARCHIVED
}

enum CreditTransactionType {
  PURCHASE
  CONSUMPTION_PLANNING_INITIAL
  CONSUMPTION_PLANNING_DETAILED
  CONSUMPTION_AGENT_IA_MESSAGE
  CONSUMPTION_PROPOSAL_GENERATION
  CONSUMPTION_TASK_IA_ASSIST
  CONSUMPTION_SALES_ARGUMENT_IA
  CONSUMPTION_MEETING_INSIGHTS_IA
  CONSUMPTION_PITCH_ANALYSIS_IA
  ADJUSTMENT_ADMIN
  INITIAL_GRANT
}
