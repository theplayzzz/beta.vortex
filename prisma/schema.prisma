generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model AgentInteraction {
  id           String         @id @default(cuid())
  title        String?
  clientId     String
  userId       String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime
  Client       Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  User         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  AgentMessage AgentMessage[]

  @@index([clientId])
  @@index([userId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model AgentMessage {
  id                 String           @id @default(cuid())
  content            String
  role               MessageRole
  agentInteractionId String
  createdAt          DateTime         @default(now())
  AgentInteraction   AgentInteraction @relation(fields: [agentInteractionId], references: [id], onDelete: Cascade)

  @@index([agentInteractionId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Client {
  id                      String               @id @default(cuid())
  name                    String
  industry                String?
  serviceOrProduct        String?
  initialObjective        String?
  contactEmail            String?
  contactPhone            String?
  website                 String?
  address                 String?
  businessDetails         String?
  targetAudience          String?
  marketingObjectives     String?
  historyAndStrategies    String?
  challengesOpportunities String?
  competitors             String?
  resourcesBudget         String?
  toneOfVoice             String?
  preferencesRestrictions String?
  richnessScore           Int                  @default(0)
  userId                  String
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  deletedAt               DateTime?
  isViewed                Boolean              @default(false)
  AgentInteraction        AgentInteraction[]
  User                    User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  ClientAttachment        ClientAttachment[]
  ClientNote              ClientNote[]
  CommercialProposal      CommercialProposal[]
  PlanningTask            PlanningTask[]
  StrategicPlanning       StrategicPlanning[]

  @@index([deletedAt])
  @@index([userId])
  @@index([userId, deletedAt, createdAt(sort: Desc)], name: "Client_userId_deletedAt_createdAt_idx")
  @@index([userId, name], name: "Client_userId_name_idx")
  @@index([userId, industry, richnessScore], name: "Client_userId_industry_richnessScore_idx")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ClientAttachment {
  id        String   @id @default(cuid())
  fileName  String
  fileUrl   String
  fileType  String
  sizeBytes Int?
  clientId  String
  userId    String
  createdAt DateTime @default(now())
  Client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([userId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ClientNote {
  id        String   @id @default(cuid())
  content   String
  clientId  String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime
  Client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([userId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model CommercialProposal {
  id               String         @id @default(cuid())
  title            String
  generatedContent String?
  status           ProposalStatus @default(DRAFT)
  version          Int            @default(1)
  clientId         String?
  userId           String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime
  Client           Client?        @relation(fields: [clientId], references: [id])
  User             User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([userId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model CreditTransaction {
  id                String                @id @default(cuid())
  amount            Int
  type              CreditTransactionType
  description       String?
  userId            String
  relatedEntityId   String?
  relatedEntityType String?
  createdAt         DateTime              @default(now())
  User              User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([type])
  @@index([userId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model PlanningTask {
  id                                 String             @id @default(cuid())
  title                              String
  description                        String?
  status                             TaskStatus         @default(TODO)
  priority                           TaskPriority       @default(MEDIUM)
  startDate                          DateTime?
  endDate                            DateTime?
  effortEstimate                     String?
  strategicPlanningId                String?
  clientId                           String?
  ownerId                            String
  assigneeId                         String?
  parentId                           String?
  createdAt                          DateTime           @default(now())
  updatedAt                          DateTime
  User_PlanningTask_assigneeIdToUser User?              @relation("PlanningTask_assigneeIdToUser", fields: [assigneeId], references: [id])
  Client                             Client?            @relation(fields: [clientId], references: [id])
  User_PlanningTask_ownerIdToUser    User               @relation("PlanningTask_ownerIdToUser", fields: [ownerId], references: [id], onDelete: Cascade)
  PlanningTask                       PlanningTask?      @relation("PlanningTaskToPlanningTask", fields: [parentId], references: [id])
  other_PlanningTask                 PlanningTask[]     @relation("PlanningTaskToPlanningTask")
  StrategicPlanning                  StrategicPlanning? @relation(fields: [strategicPlanningId], references: [id])
  TaskAttachment                     TaskAttachment[]
  TaskComment                        TaskComment[]

  @@index([assigneeId])
  @@index([clientId])
  @@index([ownerId])
  @@index([parentId])
  @@index([strategicPlanningId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model SalesArgument {
  id                String   @id @default(cuid())
  title             String
  script            String?
  objectionsHandled Json?
  category          String?
  userId            String
  createdAt         DateTime @default(now())
  updatedAt         DateTime
  User              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([category])
  @@index([userId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model StrategicPlanning {
  id                 String         @id @default(cuid())
  title              String
  description        String?
  specificObjectives String?
  scope              String?
  successMetrics     String?
  budget             String?
  toneOfVoice        String?
  status             PlanningStatus @default(DRAFT)
  clientId           String
  userId             String
  createdAt          DateTime       @default(now())
  updatedAt          DateTime
  
  // üÜï NOVOS CAMPOS PARA PLAN-005
  formDataJSON       Json?          // Dados completos do formul√°rio (4 abas)
  clientSnapshot     Json?          // Snapshot dos dados do cliente
  
  PlanningTask       PlanningTask[]
  Client             Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  User               User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([userId])
  @@index([userId, clientId])    // üÜï √çndice otimizado
  @@index([userId, status])      // üÜï √çndice para filtros
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model TaskAttachment {
  id           String       @id @default(cuid())
  fileName     String
  fileUrl      String
  fileType     String
  sizeBytes    Int?
  taskId       String
  userId       String
  createdAt    DateTime     @default(now())
  PlanningTask PlanningTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  User         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([userId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model TaskComment {
  id           String       @id @default(cuid())
  content      String
  taskId       String
  userId       String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime
  PlanningTask PlanningTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  User         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([userId])
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model User {
  id                                         String               @id @default(cuid())
  clerkId                                    String               @unique
  email                                      String               @unique
  firstName                                  String?
  lastName                                   String?
  profileImageUrl                            String?
  creditBalance                              Int                  @default(0)
  createdAt                                  DateTime             @default(now())
  updatedAt                                  DateTime
  AgentInteraction                           AgentInteraction[]
  Client                                     Client[]
  ClientAttachment                           ClientAttachment[]
  ClientNote                                 ClientNote[]
  CommercialProposal                         CommercialProposal[]
  CreditTransaction                          CreditTransaction[]
  PlanningTask_PlanningTask_assigneeIdToUser PlanningTask[]       @relation("PlanningTask_assigneeIdToUser")
  PlanningTask_PlanningTask_ownerIdToUser    PlanningTask[]       @relation("PlanningTask_ownerIdToUser")
  SalesArgument                              SalesArgument[]
  StrategicPlanning                          StrategicPlanning[]
  TaskAttachment                             TaskAttachment[]
  TaskComment                                TaskComment[]
}

enum CreditTransactionType {
  PURCHASE
  CONSUMPTION_PLANNING_INITIAL
  CONSUMPTION_PLANNING_DETAILED
  CONSUMPTION_AGENT_IA_MESSAGE
  CONSUMPTION_PROPOSAL_GENERATION
  CONSUMPTION_TASK_IA_ASSIST
  CONSUMPTION_SALES_ARGUMENT_IA
  CONSUMPTION_MEETING_INSIGHTS_IA
  CONSUMPTION_PITCH_ANALYSIS_IA
  ADJUSTMENT_ADMIN
  INITIAL_GRANT
}

enum MessageRole {
  USER
  AI
}

enum PlanningStatus {
  DRAFT
  ACTIVE
  COMPLETED
  ARCHIVED
  
  // üÜï Status para Plan-006 (IA)
  PENDING_AI_BACKLOG_GENERATION   // Aguardando gera√ß√£o IA
  AI_BACKLOG_VISIBLE              // Backlog IA vis√≠vel
  PENDING_AI_REFINED_LIST         // Aguardando lista refinada
  AI_REFINED_LIST_VISIBLE         // Lista refinada vis√≠vel
}

enum ProposalStatus {
  DRAFT
  SENT
  VIEWED
  ACCEPTED
  REJECTED
  NEGOTIATION
  ARCHIVED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
  BLOCKED
}
