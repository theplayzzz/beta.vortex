// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql" // Supabase usa PostgreSQL
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Modelo para Usuários, sincronizado com Clerk
model User {
  id              String  @id @default(cuid())
  clerkId         String  @unique // ID do usuário no Clerk
  email           String  @unique
  firstName       String?
  lastName        String?
  profileImageUrl String?
  creditBalance   Int     @default(0) // Saldo de créditos do usuário

  clients             Client[]
  strategicPlannings  StrategicPlanning[]
  agentInteractions   AgentInteraction[]
  commercialProposals CommercialProposal[]
  tasksOwned          PlanningTask[]      @relation("OwnedTasks")
  tasksAssigned       PlanningTask[]      @relation("AssignedTasks")
  salesArguments      SalesArgument[]
  creditTransactions  CreditTransaction[]
  clientNotes         ClientNote[]
  clientAttachments   ClientAttachment[]
  taskComments        TaskComment[]
  taskAttachments     TaskAttachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modelo para Clientes
model Client {
  id                String  @id @default(cuid())
  name              String
  industry          String? // Ramo de Atuação
  serviceOrProduct  String? // Breve descrição do Serviço/Produto
  initialObjective  String? // Objetivo inicial (do pop-up)

  // Informações detalhadas (enriquecimento progressivo)
  contactEmail            String?
  contactPhone            String?
  website                 String?
  address                 String?
  businessDetails         String? // TEXT no DB
  targetAudience          String? // TEXT no DB
  marketingObjectives     String? // TEXT no DB
  historyAndStrategies    String? // TEXT no DB
  challengesOpportunities String? // TEXT no DB
  competitors             String? // TEXT no DB
  resourcesBudget         String? // TEXT no DB
  toneOfVoice             String? // TEXT no DB
  preferencesRestrictions String? // TEXT no DB

  richnessScore Int @default(0) // 0-100, calculado pela aplicação

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  strategicPlannings StrategicPlanning[]
  agentInteractions  AgentInteraction[]
  tasks              PlanningTask[]
  commercialProposals CommercialProposal[]
  notes              ClientNote[]
  attachments        ClientAttachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model ClientNote {
  id        String   @id @default(cuid())
  content   String // TEXT no DB
  clientId  String
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  userId    String // Quem criou a nota
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId])
  @@index([userId])
}

model ClientAttachment {
  id        String   @id @default(cuid())
  fileName  String
  fileUrl   String // URL para o arquivo no Supabase Storage ou similar
  fileType  String // ex: 'application/pdf', 'image/png'
  sizeBytes Int?
  clientId  String
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  userId    String // Quem fez o upload
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([clientId])
  @@index([userId])
}

// Modelo para Planejamentos Estratégicos (Backlogs)
model StrategicPlanning {
  id          String @id @default(cuid())
  title       String
  description String? // Descrição geral do planejamento

  // Campos do formulário de informações adicionais
  specificObjectives String? // TEXT no DB
  scope              String? // TEXT no DB
  successMetrics     String? // TEXT no DB
  budget             String?
  toneOfVoice        String?

  status PlanningStatus @default(DRAFT)

  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  planningTasks PlanningTask[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId])
  @@index([userId])
}

// Modelo para Tarefas (dentro de um planejamento ou avulsas)
model PlanningTask {
  id          String  @id @default(cuid())
  title       String
  description String? // TEXT no DB

  status        TaskStatus   @default(TODO)
  priority      TaskPriority @default(MEDIUM)
  startDate     DateTime?
  endDate       DateTime?
  effortEstimate String?      // ex: "2h", "1d", "5pts"

  strategicPlanningId String? // Opcional: se a tarefa pertence a um planejamento
  strategicPlanning   StrategicPlanning? @relation(fields: [strategicPlanningId], references: [id], onDelete: SetNull)

  clientId String? // Opcional: para tarefas avulsas vinculadas a um cliente
  client   Client? @relation(fields: [clientId], references: [id], onDelete: SetNull)

  ownerId    String // Quem criou/é dono da tarefa
  owner      User   @relation("OwnedTasks", fields: [ownerId], references: [id], onDelete: Cascade)
  assigneeId String? // Quem está designado para a tarefa
  assignee   User?   @relation("AssignedTasks", fields: [assigneeId], references: [id], onDelete: SetNull)

  parentId   String?
  parentTask PlanningTask?  @relation("SubTasks", fields: [parentId], references: [id], onDelete: SetNull) // onDelete: SetNull para não apagar subtasks se a pai for apagada, ou Cascade se preferir
  subTasks   PlanningTask[] @relation("SubTasks")

  comments    TaskComment[]
  attachments TaskAttachment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([strategicPlanningId])
  @@index([clientId])
  @@index([ownerId])
  @@index([assigneeId])
  @@index([parentId])
}

model TaskComment {
  id        String   @id @default(cuid())
  content   String
  taskId    String
  task      PlanningTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([taskId])
  @@index([userId])
}

model TaskAttachment {
  id        String   @id @default(cuid())
  fileName  String
  fileUrl   String
  fileType  String
  sizeBytes Int?
  taskId    String
  task      PlanningTask @relation(fields: [taskId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([taskId])
  @@index([userId])
}

// Modelo para Interações com o Agente IA (Sessões de Chat)
model AgentInteraction {
  id     String @id @default(cuid())
  title  String? // Usuário pode nomear o chat

  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  messages AgentMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId])
  @@index([userId])
}

// Modelo para Mensagens dentro de uma Interação com Agente IA
model AgentMessage {
  id                 String      @id @default(cuid())
  content            String // TEXT no DB
  role               MessageRole // USER ou AI
  agentInteractionId String
  agentInteraction   AgentInteraction @relation(fields: [agentInteractionId], references: [id], onDelete: Cascade)

  // Poderia adicionar custo em créditos aqui se cada msg tiver um custo
  // creditCost Int? 

  createdAt DateTime @default(now())

  @@index([agentInteractionId])
}

// Modelo para Propostas Comerciais
model CommercialProposal {
  id               String           @id @default(cuid())
  title            String
  generatedContent String?          // TEXT no DB, conteúdo gerado pela IA ou inserido
  status           ProposalStatus   @default(DRAFT)
  version          Int              @default(1)

  clientId String? // Opcional: proposta pode não ser para um cliente específico inicialmente
  client   Client? @relation(fields: [clientId], references: [id], onDelete: SetNull)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId])
  @@index([userId])
}

// Modelo para Argumentos de Vendas
model SalesArgument {
  id                 String   @id @default(cuid())
  title              String
  script             String? // TEXT no DB
  objectionsHandled  Json?    // Lista de objeções e contra-argumentos
  category           String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([category])
}

// Modelo para transações de crédito
model CreditTransaction {
  id          String            @id @default(cuid())
  amount      Int // Positivo para compra, negativo para consumo
  type        CreditTransactionType
  description String?
  userId      String
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Para rastrear a qual entidade o consumo está relacionado (opcional)
  relatedEntityId   String?
  relatedEntityType String? // Ex: "StrategicPlanning", "AgentInteraction", "CommercialProposal"

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([type])
}

// --- ENUMS ---

enum PlanningStatus {
  DRAFT
  ACTIVE
  COMPLETED
  ARCHIVED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
  BLOCKED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum MessageRole {
  USER
  AI
}

enum ProposalStatus {
  DRAFT
  SENT
  VIEWED
  ACCEPTED
  REJECTED
  NEGOTIATION
  ARCHIVED
}

enum CreditTransactionType {
  PURCHASE
  CONSUMPTION_PLANNING_INITIAL
  CONSUMPTION_PLANNING_DETAILED
  CONSUMPTION_AGENT_IA_MESSAGE
  CONSUMPTION_PROPOSAL_GENERATION
  CONSUMPTION_TASK_IA_ASSIST
  CONSUMPTION_SALES_ARGUMENT_IA
  CONSUMPTION_MEETING_INSIGHTS_IA // Futuro
  CONSUMPTION_PITCH_ANALYSIS_IA   // Futuro
  ADJUSTMENT_ADMIN // Para correções manuais
  INITIAL_GRANT    // Créditos iniciais ao se registrar
} 