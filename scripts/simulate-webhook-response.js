const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function simulateWebhookResponse() {
  try {
    console.log('üîÑ Simulando resposta do webhook...\n');

    // 1. Buscar planejamento em processamento
    const processing = await prisma.strategicPlanning.findFirst({
      where: {
        status: 'PENDING_AI_REFINED_LIST'
      },
      orderBy: {
        createdAt: 'desc'
      }
    });

    if (!processing) {
      console.log('‚ùå Nenhum planejamento em estado PENDING_AI_REFINED_LIST encontrado.');
      console.log('Execute: node scripts/test-plan-010.js primeiro');
      return;
    }

    console.log('‚úÖ Planejamento encontrado:', processing.title);
    console.log('üìã ID:', processing.id);
    console.log('üîÑ Status atual:', processing.status);

    // 2. Simular dados refinados da IA
    const refinedTasks = {
      tarefas_refinadas: [
        {
          nome: 'Configura√ß√£o do Sistema de Autentica√ß√£o Avan√ßado',
          descricao: 'Implementar sistema completo de autentica√ß√£o com m√∫ltiplas camadas de seguran√ßa, incluindo OAuth, 2FA e controle de sess√µes.',
          prioridade: 'alta',
          output: 'Sistema de autentica√ß√£o completo com:\n- Integra√ß√£o com provedores OAuth (Google, GitHub, LinkedIn)\n- Autentica√ß√£o em duas etapas (2FA)\n- Controle de sess√µes e tokens JWT\n- Middleware de prote√ß√£o de rotas\n- Logs de auditoria de acesso\n- Documenta√ß√£o completa de implementa√ß√£o'
        },
        {
          nome: 'Dashboard de Analytics e M√©tricas em Tempo Real',
          descricao: 'Desenvolver dashboard interativo para visualiza√ß√£o de m√©tricas de neg√≥cio, KPIs e relat√≥rios em tempo real com capacidade de exporta√ß√£o.',
          prioridade: 'm√©dia',
          output: 'Dashboard completo contendo:\n- Gr√°ficos interativos (Chart.js/Recharts)\n- Cards de KPIs principais\n- Filtros por per√≠odo e categorias\n- Sistema de alertas personaliz√°veis\n- Exporta√ß√£o para PDF e Excel\n- Interface responsiva para mobile\n- Cache de dados para performance'
        },
        {
          nome: 'API RESTful para Integra√ß√£o de Terceiros',
          descricao: 'Construir API robusta para integra√ß√£o com sistemas externos, incluindo webhook, rate limiting e documenta√ß√£o completa.',
          prioridade: 'normal',
          output: 'API completa incluindo:\n- Endpoints RESTful documentados (OpenAPI/Swagger)\n- Sistema de webhooks para notifica√ß√µes\n- Autentica√ß√£o por API keys\n- Rate limiting e throttling\n- Versionamento de API\n- Logs detalhados de requisi√ß√µes\n- Testes automatizados (Jest/Supertest)'
        },
        {
          nome: 'Sistema de Notifica√ß√µes Push Inteligente',
          descricao: 'Implementar sistema completo de notifica√ß√µes push para web e mobile com personaliza√ß√£o avan√ßada e analytics de engajamento.',
          prioridade: 'normal',
          output: 'Sistema de notifica√ß√µes com:\n- Push notifications para PWA\n- Integra√ß√£o com Firebase Cloud Messaging\n- Templates personaliz√°veis por usu√°rio\n- Agendamento de notifica√ß√µes\n- Analytics de abertura e engajamento\n- Prefer√™ncias granulares de usu√°rio\n- Fallback para email quando offline'
        }
      ]
    };

    // 3. Aguardar um pouco para simular processamento
    console.log('\n‚è≥ Aguardando 3 segundos (simulando processamento da IA)...');
    await new Promise(resolve => setTimeout(resolve, 3000));

    // 4. Atualizar planejamento com dados refinados
    const updated = await prisma.strategicPlanning.update({
      where: { id: processing.id },
      data: {
        status: 'AI_REFINED_LIST_VISIBLE',
        scope: JSON.stringify(refinedTasks)
      }
    });

    console.log('\n‚úÖ Webhook simulado com sucesso!');
    console.log('üîÑ Status atualizado para:', updated.status);
    console.log('üì¶ Campo scope preenchido com', refinedTasks.tarefas_refinadas.length, 'tarefas refinadas');
    
    console.log('\nüß™ TESTE O POLLING:');
    console.log('1. Abra o navegador em: http://localhost:3000/planejamentos/' + processing.id);
    console.log('2. V√° para a aba "Planejamento Refinado"');
    console.log('3. A interface deve atualizar automaticamente em at√© 2 segundos!');
    
    console.log('\nüìä Detalhes das tarefas criadas:');
    refinedTasks.tarefas_refinadas.forEach((task, index) => {
      console.log(`${index + 1}. ${task.nome} (${task.prioridade})`);
    });

  } catch (error) {
    console.error('‚ùå Erro ao simular webhook:', error);
  } finally {
    await prisma.$disconnect();
  }
}

simulateWebhookResponse(); 