// Carregar vari√°veis de ambiente
require('dotenv').config();

const { createClerkClient } = require('@clerk/backend');
const { PrismaClient } = require('@prisma/client');

async function checkUserCounts() {
  const prisma = new PrismaClient();
  
  // Criar inst√¢ncia do Clerk com as credenciais
  const clerkClient = createClerkClient({ 
    secretKey: process.env.CLERK_SECRET_KEY 
  });
  
  try {
    // Contar usu√°rios no Supabase
    const supabaseUsers = await prisma.user.findMany({
      select: { id: true, clerkId: true, email: true, approvalStatus: true }
    });
    
    console.log('üìä AN√ÅLISE DE USU√ÅRIOS');
    console.log('='.repeat(50));
    console.log(`Usu√°rios no Supabase: ${supabaseUsers.length}`);
    
    if (supabaseUsers.length > 0) {
      console.log('\nüîç Usu√°rios no Supabase:');
      supabaseUsers.forEach((user, index) => {
        console.log(`${index + 1}. ${user.email} (Clerk: ${user.clerkId}) - Status: ${user.approvalStatus}`);
      });
    }
    
    // Tentar contar usu√°rios no Clerk
    try {
      console.log('\nüîÑ Consultando usu√°rios no Clerk...');
      const clerkUsers = await clerkClient.users.getUserList({ limit: 100 });
      console.log(`Usu√°rios no Clerk: ${clerkUsers.data.length}`);
      
      if (clerkUsers.data.length > 0) {
        console.log('\nüîç Usu√°rios no Clerk:');
        clerkUsers.data.forEach((user, index) => {
          const email = user.emailAddresses.find(e => e.id === user.primaryEmailAddressId)?.emailAddress;
          console.log(`${index + 1}. ${email} (ID: ${user.id})`);
        });
      }
      
      // Identificar usu√°rios n√£o sincronizados
      const supabaseClerkIds = new Set(supabaseUsers.map(u => u.clerkId));
      const unsyncedUsers = clerkUsers.data.filter(clerkUser => !supabaseClerkIds.has(clerkUser.id));
      
      console.log(`\n‚ö†Ô∏è  Usu√°rios n√£o sincronizados: ${unsyncedUsers.length}`);
      if (unsyncedUsers.length > 0) {
        console.log('\nüîó Usu√°rios que precisam ser migrados:');
        unsyncedUsers.forEach((user, index) => {
          const email = user.emailAddresses.find(e => e.id === user.primaryEmailAddressId)?.emailAddress;
          console.log(`${index + 1}. ${email} (ID: ${user.id})`);
        });
        
        return unsyncedUsers; // Retornar para uso na migra√ß√£o
      }
      
    } catch (clerkError) {
      console.log('\n‚ùå Erro ao acessar Clerk:', clerkError.message);
      console.log('Verifique se CLERK_SECRET_KEY est√° configurado corretamente');
      console.log('Chave atual:', process.env.CLERK_SECRET_KEY ? 'Configurada' : 'N√£o configurada');
    }
    
  } catch (error) {
    console.error('‚ùå Erro:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

checkUserCounts(); 