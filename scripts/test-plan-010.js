const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function createTestData() {
  try {
    console.log('üß™ Criando dados de teste para Plan-010...\n');

    // 1. Buscar primeiro usu√°rio existente
    const user = await prisma.user.findFirst();
    
    if (!user) {
      console.log('‚ùå Nenhum usu√°rio encontrado no banco. Execute o seed primeiro.');
      return;
    }

    console.log('‚úÖ Usu√°rio encontrado:', user.email);

    // 2. Criar cliente de teste
    const testClient = await prisma.client.create({
      data: {
        name: 'Empresa Teste Plan-010',
        industry: 'Tecnologia',
        richnessScore: 75,
        businessDetails: 'Empresa de tecnologia focada em solu√ß√µes digitais',
        contactEmail: 'contato@empresateste.com',
        website: 'https://empresateste.com',
        userId: user.id
      }
    });

    console.log('‚úÖ Cliente de teste criado:', testClient.name);

    // 3. Criar planejamento com tarefas estruturadas (status AI_BACKLOG_VISIBLE)
    const planningWithTasks = await prisma.strategicPlanning.create({
      data: {
        title: 'Planejamento Estrat√©gico - Teste Plan-010',
        description: 'Planejamento para testar funcionalidades do Plan-010',
        status: 'AI_BACKLOG_VISIBLE',
        clientId: testClient.id,
        userId: user.id,
        formDataJSON: {
          informacoes_basicas: {
            titulo_planejamento: 'Planejamento Estrat√©gico - Teste Plan-010',
            descricao_objetivo: 'Testar funcionalidades do Plan-010',
            setor: 'Tecnologia'
          }
        },
        specificObjectives: JSON.stringify({
          nome_do_backlog: 'Backlog Estrat√©gico - Teste Plan-010',
          objetivo_do_backlog: 'Implementar melhorias no sistema de aprova√ß√£o com nova aba de planejamento refinado',
          tarefas: [
            {
              nome: 'Implementar Pop-up de Confirma√ß√£o',
              descricao: 'Criar modal de confirma√ß√£o antes da aprova√ß√£o das tarefas selecionadas',
              prioridade: 'alta'
            },
            {
              nome: 'Criar Nova Aba Planejamento Refinado',
              descricao: 'Adicionar nova aba ao lado direito da aba Objetivos Espec√≠ficos',
              prioridade: 'alta'
            },
            {
              nome: 'Sistema de Loading Din√¢mico',
              descricao: 'Implementar anima√ß√µes de loading e feedback visual durante processamento',
              prioridade: 'm√©dia'
            },
            {
              nome: 'Lista de Tarefas Estilo ClickUp',
              descricao: 'Criar componente para exibir tarefas refinadas em formato similar ao ClickUp',
              prioridade: 'm√©dia'
            },
            {
              nome: 'Modal de Detalhes da Tarefa',
              descricao: 'Implementar modal para exibir detalhes completos ao clicar em uma tarefa',
              prioridade: 'normal'
            }
          ]
        })
      }
    });

    console.log('‚úÖ Planejamento com tarefas criado:', planningWithTasks.title);

    // 4. Criar planejamento com status PENDING_AI_REFINED_LIST (para testar loading)
    const planningProcessing = await prisma.strategicPlanning.create({
      data: {
        title: 'Planejamento em Processamento - Plan-010',
        description: 'Planejamento para testar estado de loading da nova aba',
        status: 'PENDING_AI_REFINED_LIST',
        clientId: testClient.id,
        userId: user.id,
        formDataJSON: {
          informacoes_basicas: {
            titulo_planejamento: 'Planejamento em Processamento - Plan-010',
            descricao_objetivo: 'Testar estado de loading',
            setor: 'Tecnologia'
          }
        },
        specificObjectives: JSON.stringify({
          nome_do_backlog: 'Backlog em Processamento',
          objetivo_do_backlog: 'Testar estados de loading',
          tarefas: [
            {
              nome: 'Tarefa Aprovada 1',
              descricao: 'Primeira tarefa aprovada para processamento',
              prioridade: 'alta',
              selecionada: true
            },
            {
              nome: 'Tarefa Aprovada 2',
              descricao: 'Segunda tarefa aprovada para processamento',
              prioridade: 'm√©dia',
              selecionada: true
            }
          ]
        })
      }
    });

    console.log('‚úÖ Planejamento em processamento criado:', planningProcessing.title);

    // 5. Criar planejamento com tarefas refinadas (para testar lista ClickUp)
    const planningWithRefinedTasks = await prisma.strategicPlanning.create({
      data: {
        title: 'Planejamento com Tarefas Refinadas - Plan-010',
        description: 'Planejamento para testar exibi√ß√£o de tarefas refinadas',
        status: 'AI_REFINED_LIST_VISIBLE',
        clientId: testClient.id,
        userId: user.id,
        formDataJSON: {
          informacoes_basicas: {
            titulo_planejamento: 'Planejamento com Tarefas Refinadas - Plan-010',
            descricao_objetivo: 'Testar lista de tarefas refinadas',
            setor: 'Tecnologia'
          }
        },
        specificObjectives: JSON.stringify({
          nome_do_backlog: 'Backlog Original',
          objetivo_do_backlog: 'Backlog original antes do refinamento',
          tarefas: [
            {
              nome: 'Tarefa Original 1',
              descricao: 'Primeira tarefa original',
              prioridade: 'alta'
            }
          ]
        }),
        scope: JSON.stringify({
          tarefas_refinadas: [
            {
              nome: 'Configura√ß√£o Avan√ßada do Sistema de Autentica√ß√£o',
              descricao: 'Implementar sistema de autentica√ß√£o robusto com suporte a m√∫ltiplos provedores, incluindo Google, GitHub e autentica√ß√£o por email/senha com verifica√ß√£o em duas etapas.',
              prioridade: 'alta',
              output: 'Sistema de autentica√ß√£o completo configurado com:\n- Integra√ß√£o com Clerk\n- Suporte a OAuth (Google, GitHub)\n- Autentica√ß√£o por email/senha\n- Verifica√ß√£o em duas etapas\n- Middleware de prote√ß√£o de rotas\n- Documenta√ß√£o de uso'
            },
            {
              nome: 'Dashboard de M√©tricas em Tempo Real',
              descricao: 'Criar dashboard interativo para visualiza√ß√£o de m√©tricas de neg√≥cio em tempo real, incluindo gr√°ficos, KPIs e alertas autom√°ticos.',
              prioridade: 'm√©dia',
              output: 'Dashboard completo com:\n- Gr√°ficos interativos (Chart.js/D3.js)\n- KPIs principais em cards\n- Sistema de alertas\n- Filtros por per√≠odo\n- Exporta√ß√£o de relat√≥rios\n- Responsividade mobile'
            },
            {
              nome: 'API de Integra√ß√£o com Sistemas Externos',
              descricao: 'Desenvolver API RESTful para integra√ß√£o com sistemas de terceiros, incluindo webhooks, autentica√ß√£o por API key e documenta√ß√£o completa.',
              prioridade: 'normal',
              output: 'API completa com:\n- Endpoints RESTful documentados\n- Sistema de webhooks\n- Autentica√ß√£o por API key\n- Rate limiting\n- Logs de auditoria\n- Documenta√ß√£o Swagger/OpenAPI'
            },
            {
              nome: 'Sistema de Notifica√ß√µes Push',
              descricao: 'Implementar sistema de notifica√ß√µes push para web e mobile, com personaliza√ß√£o de prefer√™ncias e hist√≥rico de notifica√ß√µes.',
              prioridade: 'normal',
              output: 'Sistema de notifica√ß√µes com:\n- Push notifications para web\n- Integra√ß√£o com Firebase\n- Prefer√™ncias de usu√°rio\n- Templates personaliz√°veis\n- Hist√≥rico de notifica√ß√µes\n- Analytics de engajamento'
            }
          ]
        })
      }
    });

    console.log('‚úÖ Planejamento com tarefas refinadas criado:', planningWithRefinedTasks.title);

    console.log('\nüéØ Dados de teste criados com sucesso!');
    console.log('\nüìã URLs para teste:');
    console.log(`1. Planejamento com tarefas para aprova√ß√£o:`);
    console.log(`   http://localhost:3000/planejamentos/${planningWithTasks.id}`);
    console.log(`\n2. Planejamento em processamento (loading):`);
    console.log(`   http://localhost:3000/planejamentos/${planningProcessing.id}`);
    console.log(`\n3. Planejamento com tarefas refinadas (lista ClickUp):`);
    console.log(`   http://localhost:3000/planejamentos/${planningWithRefinedTasks.id}`);

    console.log('\nüß™ Cen√°rios de teste:');
    console.log('1. Teste do pop-up de confirma√ß√£o: Acesse o primeiro link, v√° para aba "Objetivos Espec√≠ficos", selecione tarefas e clique "Aprovar selecionadas"');
    console.log('2. Teste do loading: Acesse o segundo link e veja a nova aba "Planejamento Refinado" com anima√ß√£o');
    console.log('3. Teste da lista ClickUp: Acesse o terceiro link e veja as tarefas refinadas na nova aba');

  } catch (error) {
    console.error('‚ùå Erro ao criar dados de teste:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createTestData(); 