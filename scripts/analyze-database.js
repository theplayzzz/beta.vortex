#!/usr/bin/env node

/**
 * An√°lise Pr√©-Migra√ß√£o - Fase 4: Otimiza√ß√£o de √çndices
 * Script alternativo usando Prisma Client para an√°lise do banco
 */

const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function analyzeDatabase() {
  console.log('=== AN√ÅLISE PR√â-MIGRA√á√ÉO - FASE 4 ===');
  console.log('Data:', new Date().toISOString());
  console.log('');

  try {
    // 1. An√°lise da tabela Client
    console.log('=== AN√ÅLISE DA TABELA CLIENT ===');
    
    const totalClients = await prisma.client.count();
    const activeClients = await prisma.client.count({
      where: { deletedAt: null }
    });
    const deletedClients = await prisma.client.count({
      where: { deletedAt: { not: null } }
    });

    console.log(`Total de Clientes: ${totalClients}`);
    console.log(`Clientes Ativos: ${activeClients}`);
    console.log(`Clientes Arquivados: ${deletedClients}`);
    console.log('');

    // 2. Distribui√ß√£o por usu√°rio (top 10)
    console.log('=== DISTRIBUI√á√ÉO POR USU√ÅRIO (TOP 10) ===');
    const userDistribution = await prisma.client.groupBy({
      by: ['userId'],
      _count: {
        id: true
      },
      orderBy: {
        _count: {
          id: 'desc'
        }
      },
      take: 10
    });

    userDistribution.forEach((user, index) => {
      console.log(`${index + 1}. UserId: ${user.userId} - Clientes: ${user._count.id}`);
    });
    console.log('');

    // 3. An√°lise de performance estimada
    console.log('=== ESTIMATIVAS DE PERFORMANCE ===');
    
    let riskLevel, estimatedTime, recommendation;
    
    if (totalClients < 1000) {
      riskLevel = 'BAIXO RISCO';
      estimatedTime = '1-2 minutos';
      recommendation = 'Pode executar a qualquer momento';
    } else if (totalClients < 10000) {
      riskLevel = 'M√âDIO RISCO';
      estimatedTime = '5-10 minutos';
      recommendation = 'Executar em hor√°rio de baixo tr√°fego';
    } else if (totalClients < 100000) {
      riskLevel = 'ALTO RISCO';
      estimatedTime = '15-30 minutos';
      recommendation = 'Executar apenas em janela de manuten√ß√£o';
    } else {
      riskLevel = 'MUITO ALTO RISCO';
      estimatedTime = '30+ minutos';
      recommendation = 'Planejar cuidadosamente';
    }

    console.log(`üìä RESUMO DA AN√ÅLISE:`);
    console.log(`   ‚Ä¢ Total de registros: ${totalClients}`);
    console.log(`   ‚Ä¢ Tempo estimado: ${estimatedTime}`);
    console.log(`   ‚Ä¢ N√≠vel de risco: ${riskLevel}`);
    console.log(`   ‚Ä¢ Recomenda√ß√£o: ${recommendation}`);
    console.log('');

    // 4. Verificar √≠ndices existentes (simulado)
    console.log('=== √çNDICES A SEREM CRIADOS ===');
    console.log('1. Client_userId_deletedAt_createdAt_idx - Para listagem principal');
    console.log('2. Client_userId_name_idx - Para busca por nome');
    console.log('3. Client_userId_industry_richnessScore_idx - Para filtros avan√ßados');
    console.log('');

    // 5. Recomenda√ß√µes finais
    console.log('=== RECOMENDA√á√ïES ===');
    if (totalClients > 10000) {
      console.log('‚ö†Ô∏è  ATEN√á√ÉO: Tabela com muitos registros detectada!');
      console.log('   ‚Ä¢ Fazer backup completo antes da migra√ß√£o');
      console.log('   ‚Ä¢ Executar apenas em hor√°rio de manuten√ß√£o');
      console.log('   ‚Ä¢ Monitorar espa√ßo em disco durante execu√ß√£o');
    } else {
      console.log('‚úÖ Tabela de tamanho moderado, migra√ß√£o pode prosseguir');
    }
    console.log('');

    console.log('=== AN√ÅLISE CONCLU√çDA ===');
    console.log('Pr√≥ximo passo: Revisar os resultados e decidir sobre a execu√ß√£o da migra√ß√£o');
    
    return {
      totalClients,
      activeClients,
      deletedClients,
      riskLevel,
      estimatedTime,
      recommendation,
      canProceed: true
    };

  } catch (error) {
    console.error('‚ùå Erro durante an√°lise:', error.message);
    return {
      error: error.message,
      canProceed: false
    };
  } finally {
    await prisma.$disconnect();
  }
}

// Executar an√°lise se chamado diretamente
if (require.main === module) {
  analyzeDatabase()
    .then((result) => {
      if (result.canProceed) {
        console.log('\n‚úÖ An√°lise conclu√≠da com sucesso!');
        process.exit(0);
      } else {
        console.log('\n‚ùå An√°lise falhou!');
        process.exit(1);
      }
    })
    .catch((error) => {
      console.error('‚ùå Erro fatal:', error);
      process.exit(1);
    });
}

module.exports = { analyzeDatabase }; 