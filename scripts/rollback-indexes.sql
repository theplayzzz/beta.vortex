-- ============================================================================
-- ROLLBACK DE √çNDICES - FASE 4: OTIMIZA√á√ÉO DE PERFORMANCE
-- ============================================================================
-- Arquivo: scripts/rollback-indexes.sql
-- Prop√≥sito: Remover √≠ndices criados na Fase 4 em caso de problemas
-- Data: 2025-01-27
-- Plano: plan-004-your-plan-title.md - Fase 4
-- 
-- ATEN√á√ÉO: Este script remove os √≠ndices de otimiza√ß√£o!
-- Use apenas em caso de problemas ou necessidade de rollback.
-- ============================================================================

-- Configura√ß√µes de seguran√ßa
SET statement_timeout = '30min';  -- Timeout de 30 minutos
SET lock_timeout = '30s';         -- Timeout de lock de 30 segundos

-- ============================================================================
-- VERIFICA√á√ïES PR√â-ROLLBACK
-- ============================================================================

\echo '=== VERIFICA√á√ïES PR√â-ROLLBACK ==='

-- Verificar se a tabela Client existe
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'Client') THEN
        RAISE EXCEPTION 'Tabela Client n√£o encontrada!';
    END IF;
    RAISE NOTICE '‚úÖ Tabela Client encontrada';
END $$;

-- Listar √≠ndices existentes antes do rollback
\echo '√çndices existentes na tabela Client:'
SELECT 
    indexname,
    indexdef,
    pg_size_pretty(pg_relation_size(indexname::regclass)) as "Tamanho"
FROM pg_indexes 
WHERE tablename = 'Client'
ORDER BY indexname;

-- Verificar quais √≠ndices da Fase 4 existem
DO $$
DECLARE
    existing_indexes TEXT[] := ARRAY[]::TEXT[];
BEGIN
    -- Verificar cada √≠ndice da Fase 4
    IF EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Client_userId_deletedAt_createdAt_idx') THEN
        existing_indexes := array_append(existing_indexes, 'Client_userId_deletedAt_createdAt_idx');
    END IF;
    
    IF EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Client_userId_name_idx') THEN
        existing_indexes := array_append(existing_indexes, 'Client_userId_name_idx');
    END IF;
    
    IF EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Client_userId_industry_richnessScore_idx') THEN
        existing_indexes := array_append(existing_indexes, 'Client_userId_industry_richnessScore_idx');
    END IF;
    
    -- Reportar resultado
    IF array_length(existing_indexes, 1) IS NULL THEN
        RAISE NOTICE '‚ö†Ô∏è  Nenhum √≠ndice da Fase 4 encontrado para remo√ß√£o';
    ELSE
        RAISE NOTICE 'üìã √çndices da Fase 4 encontrados: %', array_to_string(existing_indexes, ', ');
    END IF;
END $$;

-- ============================================================================
-- CONFIRMA√á√ÉO DE ROLLBACK
-- ============================================================================

\echo ''
\echo '‚ö†Ô∏è  ATEN√á√ÉO: ROLLBACK DE √çNDICES ‚ö†Ô∏è'
\echo 'Este script ir√° remover os √≠ndices de otimiza√ß√£o criados na Fase 4.'
\echo 'Isso pode impactar negativamente a performance da aplica√ß√£o!'
\echo ''

-- Pausa para confirma√ß√£o (comentar se executando automaticamente)
-- \prompt 'Digite "CONFIRMAR" para continuar com o rollback: ' confirmation

-- ============================================================================
-- REMO√á√ÉO DOS √çNDICES
-- ============================================================================

\echo '=== INICIANDO ROLLBACK DOS √çNDICES ==='

-- ============================================================================
-- REMOVER √çNDICE 1: LISTAGEM PRINCIPAL
-- ============================================================================

\echo ''
\echo 'üóëÔ∏è  Removendo √≠ndice 1/3: Client_userId_deletedAt_createdAt_idx'

DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Client_userId_deletedAt_createdAt_idx') THEN
        RAISE NOTICE 'üöÄ Removendo √≠ndice Client_userId_deletedAt_createdAt_idx...';
        
        -- Remover √≠ndice
        EXECUTE 'DROP INDEX CONCURRENTLY IF EXISTS "Client_userId_deletedAt_createdAt_idx"';
        
        RAISE NOTICE '‚úÖ √çndice Client_userId_deletedAt_createdAt_idx removido com sucesso!';
    ELSE
        RAISE NOTICE '‚ö†Ô∏è  √çndice Client_userId_deletedAt_createdAt_idx n√£o encontrado, pulando...';
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE WARNING '‚ùå Erro ao remover √≠ndice Client_userId_deletedAt_createdAt_idx: %', SQLERRM;
END $$;

-- ============================================================================
-- REMOVER √çNDICE 2: BUSCA POR NOME
-- ============================================================================

\echo ''
\echo 'üóëÔ∏è  Removendo √≠ndice 2/3: Client_userId_name_idx'

DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Client_userId_name_idx') THEN
        RAISE NOTICE 'üöÄ Removendo √≠ndice Client_userId_name_idx...';
        
        -- Remover √≠ndice
        EXECUTE 'DROP INDEX CONCURRENTLY IF EXISTS "Client_userId_name_idx"';
        
        RAISE NOTICE '‚úÖ √çndice Client_userId_name_idx removido com sucesso!';
    ELSE
        RAISE NOTICE '‚ö†Ô∏è  √çndice Client_userId_name_idx n√£o encontrado, pulando...';
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE WARNING '‚ùå Erro ao remover √≠ndice Client_userId_name_idx: %', SQLERRM;
END $$;

-- ============================================================================
-- REMOVER √çNDICE 3: FILTROS AVAN√áADOS
-- ============================================================================

\echo ''
\echo 'üóëÔ∏è  Removendo √≠ndice 3/3: Client_userId_industry_richnessScore_idx'

DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Client_userId_industry_richnessScore_idx') THEN
        RAISE NOTICE 'üöÄ Removendo √≠ndice Client_userId_industry_richnessScore_idx...';
        
        -- Remover √≠ndice
        EXECUTE 'DROP INDEX CONCURRENTLY IF EXISTS "Client_userId_industry_richnessScore_idx"';
        
        RAISE NOTICE '‚úÖ √çndice Client_userId_industry_richnessScore_idx removido com sucesso!';
    ELSE
        RAISE NOTICE '‚ö†Ô∏è  √çndice Client_userId_industry_richnessScore_idx n√£o encontrado, pulando...';
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE WARNING '‚ùå Erro ao remover √≠ndice Client_userId_industry_richnessScore_idx: %', SQLERRM;
END $$;

-- ============================================================================
-- VERIFICA√á√ïES P√ìS-ROLLBACK
-- ============================================================================

\echo ''
\echo '=== VERIFICA√á√ïES P√ìS-ROLLBACK ==='

-- Listar √≠ndices restantes na tabela Client
\echo '√çndices restantes na tabela Client:'
SELECT 
    indexname,
    indexdef,
    pg_size_pretty(pg_relation_size(indexname::regclass)) as "Tamanho"
FROM pg_indexes 
WHERE tablename = 'Client'
ORDER BY indexname;

-- Verificar se todos os √≠ndices da Fase 4 foram removidos
DO $$
DECLARE
    remaining_indexes TEXT[] := ARRAY[]::TEXT[];
BEGIN
    -- Verificar cada √≠ndice da Fase 4
    IF EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Client_userId_deletedAt_createdAt_idx') THEN
        remaining_indexes := array_append(remaining_indexes, 'Client_userId_deletedAt_createdAt_idx');
    END IF;
    
    IF EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Client_userId_name_idx') THEN
        remaining_indexes := array_append(remaining_indexes, 'Client_userId_name_idx');
    END IF;
    
    IF EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Client_userId_industry_richnessScore_idx') THEN
        remaining_indexes := array_append(remaining_indexes, 'Client_userId_industry_richnessScore_idx');
    END IF;
    
    -- Reportar resultado
    IF array_length(remaining_indexes, 1) IS NULL THEN
        RAISE NOTICE '‚úÖ SUCESSO: Todos os √≠ndices da Fase 4 foram removidos!';
    ELSE
        RAISE WARNING '‚ö†Ô∏è  ATEN√á√ÉO: √çndices ainda presentes: %', array_to_string(remaining_indexes, ', ');
    END IF;
END $$;

-- Calcular espa√ßo liberado
\echo ''
\echo 'Espa√ßo liberado ap√≥s remo√ß√£o dos √≠ndices:'
SELECT 
    pg_size_pretty(pg_total_relation_size('Client')) as "Tamanho Total da Tabela Client";

-- ============================================================================
-- TESTES P√ìS-ROLLBACK
-- ============================================================================

\echo ''
\echo '=== TESTES P√ìS-ROLLBACK ==='
\echo 'ATEN√á√ÉO: As queries abaixo podem estar mais lentas ap√≥s o rollback!'

-- Teste 1: Query principal (sem √≠ndice otimizado)
\echo 'Teste 1: Query principal (performance pode estar degradada)'
EXPLAIN (COSTS OFF, BUFFERS OFF)
SELECT "id", "name", "industry", "richnessScore", "createdAt"
FROM "Client" 
WHERE "userId" = (SELECT "id" FROM "User" LIMIT 1) 
  AND "deletedAt" IS NULL 
ORDER BY "createdAt" DESC 
LIMIT 12;

-- Teste 2: Busca por nome (sem √≠ndice otimizado)
\echo ''
\echo 'Teste 2: Busca por nome (performance pode estar degradada)'
EXPLAIN (COSTS OFF, BUFFERS OFF)
SELECT "id", "name", "industry", "richnessScore"
FROM "Client" 
WHERE "userId" = (SELECT "id" FROM "User" LIMIT 1) 
  AND "name" ILIKE '%test%'
LIMIT 10;

-- ============================================================================
-- FINALIZA√á√ÉO
-- ============================================================================

\echo ''
\echo '=== ROLLBACK DE √çNDICES CONCLU√çDO ==='
\echo ''
\echo 'üìä RESUMO:'
\echo '   ‚úÖ √çndices da Fase 4 removidos'
\echo '   ‚ö†Ô∏è  Performance pode estar degradada'
\echo '   ‚úÖ Verifica√ß√µes de integridade passaram'
\echo ''
\echo 'üîÑ PR√ìXIMOS PASSOS:'
\echo '   1. Monitorar performance da aplica√ß√£o'
\echo '   2. Considerar recriar √≠ndices se necess√°rio'
\echo '   3. Atualizar schema.prisma removendo √≠ndices'
\echo '   4. Documentar motivo do rollback'
\echo ''
\echo 'üìù COMANDO PARA RECRIAR √çNDICES (se necess√°rio):'
\echo '   psql $DATABASE_URL -f scripts/create-indexes.sql'
\echo ''

-- Registrar timestamp de conclus√£o
SELECT 
    'Rollback de √≠ndices conclu√≠do em: ' || current_timestamp as "Status Final";

-- ============================================================================
-- LIMPEZA ADICIONAL (OPCIONAL)
-- ============================================================================

\echo ''
\echo '=== LIMPEZA ADICIONAL ==='

-- Limpar estat√≠sticas antigas
ANALYZE "Client";

-- Atualizar estat√≠sticas do planner
SELECT 'Estat√≠sticas da tabela Client atualizadas' as "Limpeza";

\echo 'Rollback conclu√≠do com sucesso!' 