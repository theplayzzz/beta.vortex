const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

// Dados de exemplo de tarefas geradas pela IA
const exampleBacklogData = {
  nome_do_backlog: "Backlog Estrat√©gico 60 dias - Advocacia Info-produtor",
  objetivo_do_backlog: "Estruturar e profissionalizar o marketing e o comercial para aumentar vendas de cursos jur√≠dicos online, melhorar presen√ßa digital e automatizar processos de capta√ß√£o de leads qualificados.",
  tarefas: [
    {
      nome: "Configura√ß√£o do Gerenciador de An√∫ncios (Meta Ads)",
      descricao: "Criar e configurar a conta de an√∫ncios no Meta Ads para come√ßar as campanhas de m√≠dia paga de forma profissional.",
      prioridade: "alta",
      selecionada: true,
      detalhamentos: []
    },
    {
      nome: "Cria√ß√£o de Landing Page Otimizada",
      descricao: "Desenvolver uma p√°gina de captura focada na convers√£o de visitantes em leads qualificados para os cursos jur√≠dicos.",
      prioridade: "alta", 
      selecionada: true,
      detalhamentos: []
    },
    {
      nome: "Setup do CRM para Advocacia",
      descricao: "Implementar e configurar um sistema de CRM especializado para escrit√≥rios de advocacia, organizando contatos e oportunidades.",
      prioridade: "m√©dia",
      selecionada: true,
      detalhamentos: []
    },
    {
      nome: "Estrat√©gia de Conte√∫do Jur√≠dico",
      descricao: "Desenvolver cronograma editorial com conte√∫do especializado em direito, incluindo artigos, v√≠deos e posts para redes sociais.",
      prioridade: "normal",
      selecionada: true,
      detalhamentos: []
    },
    {
      nome: "Automa√ß√£o de E-mail Marketing",
      descricao: "Criar sequ√™ncias automatizadas de e-mails para nutri√ß√£o de leads interessados em cursos jur√≠dicos.",
      prioridade: "m√©dia",
      selecionada: false,
      detalhamentos: []
    },
    {
      nome: "Implementa√ß√£o de Chatbot Jur√≠dico",
      descricao: "Configurar chatbot inteligente para atendimento inicial e qualifica√ß√£o de prospects interessados em servi√ßos jur√≠dicos.",
      prioridade: "normal",
      selecionada: false,
      detalhamentos: []
    },
    {
      nome: "Otimiza√ß√£o SEO para Palavras-chave Jur√≠dicas",
      descricao: "Implementar estrat√©gia de SEO focada em termos relacionados ao direito e advocacia para melhorar ranqueamento org√¢nico.",
      prioridade: "normal",
      selecionada: true,
      detalhamentos: []
    },
    {
      nome: "Cria√ß√£o de Webin√°rios Educativos",
      descricao: "Planejar e executar webin√°rios gratuitos sobre temas jur√≠dicos relevantes para captar e educar potenciais clientes.",
      prioridade: "m√©dia",
      selecionada: true,
      detalhamentos: []
    },
    {
      nome: "Dashboard de M√©tricas e KPIs",
      descricao: "Configurar painel de controle para monitorar m√©tricas de marketing e vendas, incluindo CAC, LTV e taxa de convers√£o.",
      prioridade: "alta",
      selecionada: true,
      detalhamentos: []
    },
    {
      nome: "Envio de Feedback Semanal √† Ag√™ncia",
      descricao: "Enviar relat√≥rios informais sobre evolu√ß√£o dos leads, vendas e d√∫vidas √† ag√™ncia, facilitando ajustes r√°pidos de estrat√©gia.",
      prioridade: "normal",
      selecionada: false,
      detalhamentos: []
    }
  ]
};

async function populatePlanningWithTasks() {
  try {
    console.log('üöÄ Iniciando popula√ß√£o de dados de planejamento com tarefas...');
    
    // Buscar um usu√°rio existente
    const user = await prisma.user.findFirst({
      include: {
        Client: true
      }
    });
    
    if (!user) {
      console.error('‚ùå Nenhum usu√°rio encontrado. Execute primeiro o script de popula√ß√£o de clientes.');
      return;
    }
    
    console.log(`‚úÖ Usu√°rio encontrado: ${user.firstName} ${user.lastName}`);
    
    // Buscar um cliente do usu√°rio
    const client = user.Client.length > 0 ? user.Client[0] : null;
    
    if (!client) {
      console.error('‚ùå Nenhum cliente encontrado para este usu√°rio.');
      return;
    }
    
    console.log(`‚úÖ Cliente encontrado: ${client.name}`);
    
    // Criar planejamento com tarefas estruturadas
    const planning = await prisma.strategicPlanning.create({
      data: {
        title: "Planejamento Estrat√©gico - Advocacia Digital",
        description: "Estrat√©gia completa para transforma√ß√£o digital de escrit√≥rio de advocacia especializado em info-produtos jur√≠dicos",
        status: "AI_BACKLOG_VISIBLE",
        userId: user.id,
        clientId: client.id,
        specificObjectives: JSON.stringify(exampleBacklogData),
        formDataJSON: {
          informacoes_basicas: {
            titulo_planejamento: "Planejamento Estrat√©gico - Advocacia Digital",
            descricao_objetivo: "Transformar escrit√≥rio tradicional em refer√™ncia digital com foco em info-produtos jur√≠dicos"
          },
          detalhes_do_setor: {
            advocacia_area_atuacao: "Direito Digital e Empresarial",
            advocacia_numero_clientes: "50-100",
            advocacia_ticket_medio: "R$ 2.500"
          },
          marketing: {
            maturidade_marketing: "Iniciante - poucas a√ß√µes estruturadas",
            meta_marketing: "Aumentar reconhecimento da marca e captar leads qualificados"
          },
          comercial: {
            maturidade_comercial: "Processo b√°sico, sem funil estruturado",
            meta_comercial: "Estruturar funil de vendas e aumentar convers√£o"
          }
        },
        clientSnapshot: {
          id: client.id,
          name: client.name,
          industry: client.industry,
          richnessScore: client.richnessScore,
          snapshot_timestamp: new Date().toISOString()
        }
      },
      include: {
        Client: true
      }
    });
    
    console.log(`‚úÖ Planejamento criado com sucesso:`);
    console.log(`   ID: ${planning.id}`);
    console.log(`   T√≠tulo: ${planning.title}`);
    console.log(`   Status: ${planning.status}`);
    console.log(`   Cliente: ${planning.Client.name}`);
    console.log(`   Tarefas: ${exampleBacklogData.tarefas.length} tarefas geradas pela IA`);
    console.log(`   URL: http://localhost:3000/planejamentos/${planning.id}`);
    
    console.log('\nüéØ Sistema de Refinamento de Tarefas pronto para teste!');
    console.log('   - Acesse a URL acima');
    console.log('   - Clique na aba "Objetivos Espec√≠ficos"');
    console.log('   - Teste as funcionalidades de sele√ß√£o, edi√ß√£o e aprova√ß√£o');
    
  } catch (error) {
    console.error('‚ùå Erro ao criar planejamento:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  populatePlanningWithTasks();
}

module.exports = { populatePlanningWithTasks, exampleBacklogData }; 