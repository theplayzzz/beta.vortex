const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testApprovalFlow() {
  try {
    console.log('üß™ TESTE DO FLUXO DE APROVA√á√ÉO COMPLETO');
    console.log('===================================');

    const planningId = 'cmbaqdkgw000309x06rxft5rv';

    // 1. Verificar estado atual
    console.log('üìã 1. Verificando estado atual...');
    let planning = await prisma.strategicPlanning.findUnique({
      where: { id: planningId },
      include: { Client: { select: { name: true } } }
    });

    if (!planning) {
      console.log('‚ùå Planejamento n√£o encontrado');
      return;
    }

    console.log(`‚úÖ Planejamento: "${planning.title}"`);
    console.log(`üìä Status atual: ${planning.status}`);
    console.log(`üë§ Cliente: ${planning.Client.name}`);
    console.log(`üßπ Scope atual: ${planning.scope ? 'PRESENTE' : 'VAZIO'}`);

    // 2. Simular webhook de sucesso
    console.log('\nüîî 2. Simulando webhook de callback com dados refinados...');
    
    const mockRefinedTasks = [
      {
        nome: 'An√°lise de mercado inicial',
        descricao: 'Realizar pesquisa detalhada do mercado-alvo, incluindo an√°lise de concorrentes diretos e indiretos, identifica√ß√£o de oportunidades de crescimento e defini√ß√£o de personas de clientes.',
        prioridade: 'alta',
        output: 'Relat√≥rio completo de an√°lise de mercado com insights acion√°veis'
      },
      {
        nome: 'Desenvolvimento de estrat√©gia de vendas',
        descricao: 'Criar estrat√©gia abrangente de vendas baseada nos insights da an√°lise de mercado, definindo canais de vendas, processos e m√©tricas de acompanhamento.',
        prioridade: 'alta',
        output: 'Documento estrat√©gico com planos de a√ß√£o detalhados'
      },
      {
        nome: 'Implementa√ß√£o de ferramentas de CRM',
        descricao: 'Configurar e implementar sistema de CRM para otimizar o processo de vendas, incluindo automa√ß√µes, pipelines e relat√≥rios de performance.',
        prioridade: 'm√©dia',
        output: 'Sistema CRM configurado e funcionando com equipe treinada'
      }
    ];

    const callbackPayload = {
      planning_id: planningId,
      status: 'success',
      refined_tasks: mockRefinedTasks
    };

    // Simular chamada do webhook
    const webhookResponse = await fetch('http://5.161.64.137:3003/api/webhooks/refined-list-callback', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': process.env.WEBHOOK_SECRET ? `Bearer ${process.env.WEBHOOK_SECRET}` : undefined
      },
      body: JSON.stringify(callbackPayload)
    });

    console.log(`üì° Status do webhook: ${webhookResponse.status}`);
    
    if (webhookResponse.ok) {
      const result = await webhookResponse.json();
      console.log('‚úÖ Webhook processado com sucesso:', result.message);
      console.log(`üìã ${result.tasks_count} tarefas refinadas processadas`);
    } else {
      const error = await webhookResponse.text();
      console.log('‚ùå Erro no webhook:', error);
      return;
    }

    // 3. Verificar resultado final
    console.log('\nüìä 3. Verificando resultado final...');
    
    planning = await prisma.strategicPlanning.findUnique({
      where: { id: planningId }
    });

    console.log(`üìä Status final: ${planning.status}`);
    
    if (planning.scope) {
      try {
        const scopeData = JSON.parse(planning.scope);
        console.log('‚úÖ Scope atualizado com sucesso!');
        console.log(`üìÖ Gerado em: ${scopeData.generated_at}`);
        console.log(`üìã Tarefas: ${scopeData.tasks.length}`);
        console.log(`üî¢ Vers√£o: ${scopeData.version}`);
        
        console.log('\nüìù Tarefas refinadas:');
        scopeData.tasks.forEach((task, index) => {
          console.log(`${index + 1}. ${task.nome}`);
          console.log(`   Prioridade: ${task.prioridade}`);
          console.log(`   Descri√ß√£o: ${task.descricao.substring(0, 100)}...`);
          console.log('');
        });
      } catch (parseError) {
        console.log('‚ùå Erro ao parsear scope:', parseError.message);
      }
    } else {
      console.log('‚ùå Scope ainda est√° vazio');
    }

    // 4. Testar o polling
    console.log('\nüîÑ 4. Testando endpoint de polling...');
    
    const pollingResponse = await fetch(`http://5.161.64.137:3003/api/plannings/${planningId}`);
    console.log(`üì° Status do polling: ${pollingResponse.status}`);
    
    if (pollingResponse.status === 401) {
      console.log('‚ö†Ô∏è Polling retornou 401 (esperado sem autentica√ß√£o)');
    } else if (pollingResponse.ok) {
      console.log('‚úÖ Polling funcionando (com autentica√ß√£o)');
    }

    console.log('\nüéØ RESUMO DOS TESTES:');
    console.log('‚úÖ Webhook callback: FUNCIONANDO');
    console.log('‚úÖ Atualiza√ß√£o do banco: FUNCIONANDO'); 
    console.log('‚úÖ Processamento de dados: FUNCIONANDO');
    console.log('‚ö†Ô∏è Polling (precisa autentica√ß√£o frontend)');
    
    console.log('\nüí° PR√ìXIMOS PASSOS:');
    console.log('1. Testar fluxo completo no frontend');
    console.log('2. Verificar se o polling detecta a mudan√ßa');
    console.log('3. Confirmar navega√ß√£o autom√°tica para aba refinada');

  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Executar teste
testApprovalFlow(); 