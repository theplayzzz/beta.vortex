const { PrismaClient } = require('@prisma/client');

async function disableRLSCompletely() {
  const prisma = new PrismaClient();
  
  try {
    console.log('üö® DESABILITANDO RLS COMPLETAMENTE');
    console.log('‚ö†Ô∏è  ATEN√á√ÉO: Isso remove todas as restri√ß√µes de seguran√ßa!');
    console.log('='.repeat(60));
    
    // Lista de todas as tabelas principais
    const tables = [
      'User',
      'Client', 
      'ClientNote',
      'ClientAttachment',
      'StrategicPlanning',
      'PlanningTask',
      'TaskComment',
      'TaskAttachment',
      'AgentInteraction',
      'AgentMessage',
      'CommercialProposal',
      'SalesArgument',
      'CreditTransaction',
      'UserModerationLog'
    ];
    
    console.log('\nüìã ETAPA 1: Verificando status atual do RLS...');
    
    // Verificar status atual
    const currentStatus = await prisma.$queryRaw`
      SELECT schemaname, tablename, rowsecurity 
      FROM pg_tables 
      WHERE tablename = ANY(${tables})
      AND schemaname = 'public'
      ORDER BY tablename
    `;
    
    console.log('Status atual do RLS:');
    currentStatus.forEach(table => {
      const status = table.rowsecurity ? 'üîí HABILITADO' : 'üîì DESABILITADO';
      console.log(`   ${table.tablename}: ${status}`);
    });
    
    console.log('\nüìã ETAPA 2: Desabilitando RLS em todas as tabelas...');
    
    for (const table of tables) {
      try {
        await prisma.$executeRawUnsafe(`ALTER TABLE "${table}" DISABLE ROW LEVEL SECURITY;`);
        console.log(`   ‚úÖ ${table}: RLS desabilitado`);
      } catch (error) {
        if (error.message.includes('does not exist')) {
          console.log(`   ‚ö†Ô∏è  ${table}: Tabela n√£o existe`);
        } else {
          console.log(`   ‚ùå ${table}: Erro - ${error.message}`);
        }
      }
    }
    
    console.log('\nüìã ETAPA 3: Removendo pol√≠ticas restritivas...');
    
    // Listar todas as pol√≠ticas existentes
    const existingPolicies = await prisma.$queryRaw`
      SELECT schemaname, tablename, policyname, permissive
      FROM pg_policies 
      WHERE tablename = ANY(${tables})
      ORDER BY tablename, policyname
    `;
    
    console.log(`Encontradas ${existingPolicies.length} pol√≠ticas para remover:`);
    
    // Remover cada pol√≠tica
    for (const policy of existingPolicies) {
      try {
        await prisma.$executeRawUnsafe(`DROP POLICY IF EXISTS "${policy.policyname}" ON "${policy.tablename}";`);
        console.log(`   ‚úÖ Removida: ${policy.tablename}.${policy.policyname}`);
      } catch (error) {
        console.log(`   ‚ùå Erro ao remover ${policy.tablename}.${policy.policyname}: ${error.message}`);
      }
    }
    
    console.log('\nüìã ETAPA 4: Removendo fun√ß√µes RLS auxiliares...');
    
    const functions = [
      'get_user_id_from_clerk',
      'get_current_user_approval_status', 
      'is_current_user_admin'
    ];
    
    for (const funcName of functions) {
      try {
        await prisma.$executeRawUnsafe(`DROP FUNCTION IF EXISTS ${funcName}() CASCADE;`);
        console.log(`   ‚úÖ Fun√ß√£o removida: ${funcName}`);
      } catch (error) {
        console.log(`   ‚ö†Ô∏è  Erro ao remover fun√ß√£o ${funcName}: ${error.message}`);
      }
    }
    
    console.log('\nüìã ETAPA 5: Verificando status final...');
    
    const finalStatus = await prisma.$queryRaw`
      SELECT schemaname, tablename, rowsecurity 
      FROM pg_tables 
      WHERE tablename = ANY(${tables})
      AND schemaname = 'public'
      ORDER BY tablename
    `;
    
    console.log('Status final do RLS:');
    finalStatus.forEach(table => {
      const status = table.rowsecurity ? 'üîí HABILITADO' : 'üîì DESABILITADO';
      console.log(`   ${table.tablename}: ${status}`);
    });
    
    // Verificar se ainda h√° pol√≠ticas
    const remainingPolicies = await prisma.$queryRaw`
      SELECT COUNT(*) as count
      FROM pg_policies 
      WHERE tablename = ANY(${tables})
    `;
    
    const policyCount = remainingPolicies[0]?.count || 0;
    console.log(`\nPol√≠ticas restantes: ${policyCount}`);
    
    console.log('\nüìã ETAPA 6: Testando acesso total...');
    
    try {
      // Teste 1: Inser√ß√£o direta de cliente
      const testClientId = `test-no-rls-${Date.now()}`;
      
      await prisma.$executeRaw`
        INSERT INTO "Client" (
          "id", "name", "industry", "userId", "richnessScore", "createdAt", "updatedAt"
        ) VALUES (
          ${testClientId}, 'Test No RLS', 'Test Industry', 
          'any-user-id', 100, NOW(), NOW()
        )
      `;
      console.log('   ‚úÖ Cliente criado sem restri√ß√µes');
      
      // Teste 2: Inser√ß√£o de nota
      await prisma.$executeRaw`
        INSERT INTO "ClientNote" (
          "id", "content", "clientId", "userId", "createdAt", "updatedAt"
        ) VALUES (
          gen_random_uuid(), 'Test note no RLS', ${testClientId}, 
          'any-user-id', NOW(), NOW()
        )
      `;
      console.log('   ‚úÖ Nota criada sem restri√ß√µes');
      
      // Teste 3: Inser√ß√£o de planejamento
      await prisma.$executeRaw`
        INSERT INTO "StrategicPlanning" (
          "id", "title", "description", "clientId", "userId", "status", "createdAt", "updatedAt"
        ) VALUES (
          gen_random_uuid(), 'Test Planning No RLS', 'Test Description', 
          ${testClientId}, 'any-user-id', 'DRAFT'::"PlanningStatus", NOW(), NOW()
        )
      `;
      console.log('   ‚úÖ Planejamento criado sem restri√ß√µes');
      
      // Limpar testes
      await prisma.$executeRaw`DELETE FROM "StrategicPlanning" WHERE "clientId" = ${testClientId}`;
      await prisma.$executeRaw`DELETE FROM "ClientNote" WHERE "clientId" = ${testClientId}`;
      await prisma.$executeRaw`DELETE FROM "Client" WHERE "id" = ${testClientId}`;
      console.log('   üßπ Dados de teste removidos');
      
    } catch (testError) {
      console.log('   ‚ùå Erro no teste final:', testError.message);
    }
    
    console.log('\n‚úÖ RLS COMPLETAMENTE DESABILITADO!');
    console.log('üîì Agora qualquer API externa pode inserir dados livremente');
    console.log('\n‚ö†Ô∏è  IMPORTANTE:');
    console.log('   - Todas as restri√ß√µes de seguran√ßa foram removidas');
    console.log('   - APIs externas t√™m acesso total ao banco');
    console.log('   - Certifique-se de que isso √© realmente necess√°rio');
    
    console.log('\nüîÑ Para reabilitar RLS no futuro, execute:');
    console.log('   node scripts/enable-rls-basic.js');
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
    console.error('üìÑ Stack:', error.stack);
  } finally {
    await prisma.$disconnect();
  }
}

disableRLSCompletely(); 