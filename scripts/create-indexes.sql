-- ============================================================================
-- CRIA√á√ÉO DE √çNDICES - FASE 4: OTIMIZA√á√ÉO DE PERFORMANCE
-- ============================================================================
-- Arquivo: scripts/create-indexes.sql
-- Prop√≥sito: Criar √≠ndices otimizados para a tabela Client
-- Data: 2025-01-27
-- Plano: plan-004-your-plan-title.md - Fase 4
-- 
-- ATEN√á√ÉO: Este script deve ser executado em hor√°rio de baixo tr√°fego!
-- ============================================================================

-- Configura√ß√µes de seguran√ßa
SET statement_timeout = '60min';  -- Timeout de 60 minutos
SET lock_timeout = '30s';         -- Timeout de lock de 30 segundos

-- ============================================================================
-- VERIFICA√á√ïES PR√â-EXECU√á√ÉO
-- ============================================================================

\echo '=== VERIFICA√á√ïES PR√â-EXECU√á√ÉO ==='

-- Verificar se a tabela Client existe
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = 'Client') THEN
        RAISE EXCEPTION 'Tabela Client n√£o encontrada!';
    END IF;
    RAISE NOTICE '‚úÖ Tabela Client encontrada';
END $$;

-- Verificar espa√ßo em disco
\echo 'Verificando espa√ßo em disco...'
SELECT 
    pg_size_pretty(pg_database_size(current_database())) as "Tamanho do Banco",
    pg_size_pretty(pg_total_relation_size('Client')) as "Tamanho da Tabela Client";

-- Verificar √≠ndices existentes
\echo '√çndices existentes na tabela Client:'
SELECT indexname, indexdef 
FROM pg_indexes 
WHERE tablename = 'Client'
ORDER BY indexname;

-- ============================================================================
-- CRIA√á√ÉO DOS √çNDICES
-- ============================================================================

\echo ''
\echo '=== INICIANDO CRIA√á√ÉO DOS √çNDICES ==='
\echo 'ATEN√á√ÉO: Este processo pode levar v√°rios minutos!'

-- ============================================================================
-- √çNDICE 1: LISTAGEM PRINCIPAL
-- ============================================================================

\echo ''
\echo 'üìù Criando √≠ndice 1/3: Client_userId_deletedAt_createdAt_idx'
\echo 'Prop√≥sito: Otimizar listagem principal ordenada por data'
\echo 'Query otimizada: SELECT * FROM Client WHERE userId = ? AND deletedAt IS NULL ORDER BY createdAt DESC'

-- Verificar se o √≠ndice j√° existe
DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Client_userId_deletedAt_createdAt_idx') THEN
        RAISE NOTICE '‚ö†Ô∏è  √çndice Client_userId_deletedAt_createdAt_idx j√° existe, pulando...';
    ELSE
        RAISE NOTICE 'üöÄ Criando √≠ndice Client_userId_deletedAt_createdAt_idx...';
        
        -- Registrar in√≠cio
        INSERT INTO pg_stat_statements_reset();
        
        -- Criar √≠ndice
        EXECUTE 'CREATE INDEX CONCURRENTLY "Client_userId_deletedAt_createdAt_idx" 
                 ON "Client"("userId", "deletedAt", "createdAt" DESC)';
        
        RAISE NOTICE '‚úÖ √çndice Client_userId_deletedAt_createdAt_idx criado com sucesso!';
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE EXCEPTION '‚ùå Erro ao criar √≠ndice Client_userId_deletedAt_createdAt_idx: %', SQLERRM;
END $$;

-- ============================================================================
-- √çNDICE 2: BUSCA POR NOME
-- ============================================================================

\echo ''
\echo 'üìù Criando √≠ndice 2/3: Client_userId_name_idx'
\echo 'Prop√≥sito: Otimizar busca por nome de cliente'
\echo 'Query otimizada: SELECT * FROM Client WHERE userId = ? AND name ILIKE ?'

-- Verificar se o √≠ndice j√° existe
DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Client_userId_name_idx') THEN
        RAISE NOTICE '‚ö†Ô∏è  √çndice Client_userId_name_idx j√° existe, pulando...';
    ELSE
        RAISE NOTICE 'üöÄ Criando √≠ndice Client_userId_name_idx...';
        
        -- Criar √≠ndice
        EXECUTE 'CREATE INDEX CONCURRENTLY "Client_userId_name_idx" 
                 ON "Client"("userId", "name")';
        
        RAISE NOTICE '‚úÖ √çndice Client_userId_name_idx criado com sucesso!';
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE EXCEPTION '‚ùå Erro ao criar √≠ndice Client_userId_name_idx: %', SQLERRM;
END $$;

-- ============================================================================
-- √çNDICE 3: FILTROS AVAN√áADOS
-- ============================================================================

\echo ''
\echo 'üìù Criando √≠ndice 3/3: Client_userId_industry_richnessScore_idx'
\echo 'Prop√≥sito: Otimizar filtros por setor e score de riqueza'
\echo 'Query otimizada: SELECT * FROM Client WHERE userId = ? AND industry = ? AND richnessScore > ?'

-- Verificar se o √≠ndice j√° existe
DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Client_userId_industry_richnessScore_idx') THEN
        RAISE NOTICE '‚ö†Ô∏è  √çndice Client_userId_industry_richnessScore_idx j√° existe, pulando...';
    ELSE
        RAISE NOTICE 'üöÄ Criando √≠ndice Client_userId_industry_richnessScore_idx...';
        
        -- Criar √≠ndice
        EXECUTE 'CREATE INDEX CONCURRENTLY "Client_userId_industry_richnessScore_idx" 
                 ON "Client"("userId", "industry", "richnessScore")';
        
        RAISE NOTICE '‚úÖ √çndice Client_userId_industry_richnessScore_idx criado com sucesso!';
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE EXCEPTION '‚ùå Erro ao criar √≠ndice Client_userId_industry_richnessScore_idx: %', SQLERRM;
END $$;

-- ============================================================================
-- VERIFICA√á√ïES P√ìS-CRIA√á√ÉO
-- ============================================================================

\echo ''
\echo '=== VERIFICA√á√ïES P√ìS-CRIA√á√ÉO ==='

-- Listar todos os √≠ndices da tabela Client
\echo '√çndices na tabela Client ap√≥s cria√ß√£o:'
SELECT 
    indexname,
    indexdef,
    pg_size_pretty(pg_relation_size(indexname::regclass)) as "Tamanho"
FROM pg_indexes 
WHERE tablename = 'Client'
ORDER BY indexname;

-- Verificar se todos os √≠ndices foram criados
DO $$
DECLARE
    missing_indexes TEXT[] := ARRAY[]::TEXT[];
BEGIN
    -- Verificar cada √≠ndice
    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Client_userId_deletedAt_createdAt_idx') THEN
        missing_indexes := array_append(missing_indexes, 'Client_userId_deletedAt_createdAt_idx');
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Client_userId_name_idx') THEN
        missing_indexes := array_append(missing_indexes, 'Client_userId_name_idx');
    END IF;
    
    IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = 'Client_userId_industry_richnessScore_idx') THEN
        missing_indexes := array_append(missing_indexes, 'Client_userId_industry_richnessScore_idx');
    END IF;
    
    -- Reportar resultado
    IF array_length(missing_indexes, 1) IS NULL THEN
        RAISE NOTICE '‚úÖ SUCESSO: Todos os 3 √≠ndices foram criados com sucesso!';
    ELSE
        RAISE EXCEPTION '‚ùå ERRO: √çndices n√£o criados: %', array_to_string(missing_indexes, ', ');
    END IF;
END $$;

-- Calcular espa√ßo total usado pelos novos √≠ndices
\echo ''
\echo 'Espa√ßo total usado pelos novos √≠ndices:'
SELECT 
    pg_size_pretty(
        COALESCE(pg_relation_size('Client_userId_deletedAt_createdAt_idx'::regclass), 0) +
        COALESCE(pg_relation_size('Client_userId_name_idx'::regclass), 0) +
        COALESCE(pg_relation_size('Client_userId_industry_richnessScore_idx'::regclass), 0)
    ) as "Espa√ßo Total dos Novos √çndices";

-- ============================================================================
-- TESTES B√ÅSICOS DE PERFORMANCE
-- ============================================================================

\echo ''
\echo '=== TESTES B√ÅSICOS DE PERFORMANCE ==='

-- Teste 1: Query principal
\echo 'Teste 1: Verificando uso do √≠ndice principal'
EXPLAIN (COSTS OFF, BUFFERS OFF)
SELECT "id", "name", "industry", "richnessScore", "createdAt"
FROM "Client" 
WHERE "userId" = (SELECT "id" FROM "User" LIMIT 1) 
  AND "deletedAt" IS NULL 
ORDER BY "createdAt" DESC 
LIMIT 12;

-- Teste 2: Busca por nome
\echo ''
\echo 'Teste 2: Verificando uso do √≠ndice de nome'
EXPLAIN (COSTS OFF, BUFFERS OFF)
SELECT "id", "name", "industry", "richnessScore"
FROM "Client" 
WHERE "userId" = (SELECT "id" FROM "User" LIMIT 1) 
  AND "name" ILIKE '%test%'
LIMIT 10;

-- Teste 3: Filtros avan√ßados
\echo ''
\echo 'Teste 3: Verificando uso do √≠ndice de filtros'
EXPLAIN (COSTS OFF, BUFFERS OFF)
SELECT "id", "name", "industry", "richnessScore"
FROM "Client" 
WHERE "userId" = (SELECT "id" FROM "User" LIMIT 1) 
  AND "industry" IS NOT NULL
  AND "richnessScore" > 50
LIMIT 10;

-- ============================================================================
-- FINALIZA√á√ÉO
-- ============================================================================

\echo ''
\echo '=== CRIA√á√ÉO DE √çNDICES CONCLU√çDA ==='
\echo ''
\echo 'üìä RESUMO:'
\echo '   ‚úÖ 3 √≠ndices criados com sucesso'
\echo '   ‚úÖ Verifica√ß√µes de integridade passaram'
\echo '   ‚úÖ Testes b√°sicos de performance executados'
\echo ''
\echo 'üîÑ PR√ìXIMOS PASSOS:'
\echo '   1. Executar testes de performance completos'
\echo '   2. Atualizar schema.prisma com os novos √≠ndices'
\echo '   3. Monitorar performance da aplica√ß√£o'
\echo '   4. Documentar resultados no log de execu√ß√£o'
\echo ''
\echo 'üìù COMANDO PARA ROLLBACK (se necess√°rio):'
\echo '   psql $DATABASE_URL -f scripts/rollback-indexes.sql'
\echo ''

-- Registrar timestamp de conclus√£o
SELECT 
    'Cria√ß√£o de √≠ndices conclu√≠da em: ' || current_timestamp as "Status Final"; 