/**
 * üÜï PHASE 2: Aplicar pol√≠ticas RLS via Prisma (VERS√ÉO CORRIGIDA)
 * Executa comandos SQL DDL atrav√©s do Prisma Client usando $executeRawUnsafe
 */

require('dotenv').config({ path: '.env' });
const { PrismaClient } = require('@prisma/client');

console.log('='.repeat(60));
console.log('üîí PHASE 2: Aplicando Pol√≠ticas RLS via Prisma (CORRIGIDO)');
console.log('='.repeat(60));

const prisma = new PrismaClient();

async function applyRLSPoliciesPrismaFixed() {
  try {
    console.log('\nüöÄ INICIANDO APLICA√á√ÉO DE POL√çTICAS RLS...');

    // ==================================================
    // 0. VERIFICAR FUN√á√ÉO BASE get_user_id_from_clerk
    // ==================================================
    console.log('\nüìã 0. VERIFICANDO FUN√á√ÉO BASE...');
    
    try {
      const baseFunction = await prisma.$queryRaw`
        SELECT proname FROM pg_proc WHERE proname = 'get_user_id_from_clerk';
      `;
      
      if (baseFunction.length === 0) {
        console.log('  ‚ö†Ô∏è  Fun√ß√£o get_user_id_from_clerk n√£o encontrada. Criando...');
        
        await prisma.$executeRaw`
          CREATE OR REPLACE FUNCTION get_user_id_from_clerk()
          RETURNS TEXT AS $$
          DECLARE
            clerk_id TEXT;
            user_id TEXT;
          BEGIN
            -- Extrair clerkId do JWT
            clerk_id := (SELECT auth.jwt() ->> 'sub');
            
            IF clerk_id IS NULL THEN
              RETURN NULL;
            END IF;
            
            -- Buscar userId correspondente ao clerkId
            SELECT id INTO user_id FROM "User" WHERE "clerkId" = clerk_id;
            
            RETURN user_id;
          END;
          $$ LANGUAGE plpgsql SECURITY DEFINER;
        `;
        console.log('  ‚úÖ Fun√ß√£o get_user_id_from_clerk criada');
      } else {
        console.log('  ‚úÖ Fun√ß√£o get_user_id_from_clerk j√° existe');
      }
    } catch (error) {
      console.log('  ‚ö†Ô∏è  Erro ao verificar/criar fun√ß√£o base:', error.message);
    }

    // ==================================================
    // 1. HABILITAR RLS EM TODAS AS TABELAS
    // ==================================================
    console.log('\nüìã 1. HABILITANDO RLS EM TODAS AS TABELAS...');
    
    const tables = ['User', 'Client', 'StrategicPlanning', 'CommercialProposal', 'CreditTransaction', 'UserModerationLog'];
    
    for (const table of tables) {
      try {
        await prisma.$executeRawUnsafe(`ALTER TABLE "${table}" ENABLE ROW LEVEL SECURITY;`);
        console.log(`  ‚úÖ RLS habilitado na tabela ${table}`);
      } catch (error) {
        console.log(`  ‚ö†Ô∏è  RLS ${table}:`, error.message);
      }
    }

    // ==================================================
    // 2. CRIAR FUN√á√ïES AUXILIARES
    // ==================================================
    console.log('\nüìã 2. CRIANDO FUN√á√ïES AUXILIARES...');

    // Fun√ß√£o para obter status de aprova√ß√£o do usu√°rio atual
    try {
      await prisma.$executeRawUnsafe(`
        CREATE OR REPLACE FUNCTION get_current_user_approval_status()
        RETURNS TEXT AS $$
        DECLARE
          approval_status TEXT;
          user_id_val TEXT;
        BEGIN
          -- Obter o userId baseado no clerkId do JWT
          user_id_val := get_user_id_from_clerk();
          
          IF user_id_val IS NULL THEN
            RETURN NULL;
          END IF;
          
          -- Buscar o status de aprova√ß√£o
          SELECT "approvalStatus" INTO approval_status 
          FROM "User" 
          WHERE id = user_id_val;
          
          RETURN approval_status;
        END;
        $$ LANGUAGE plpgsql SECURITY DEFINER;
      `);
      console.log('  ‚úÖ Fun√ß√£o get_current_user_approval_status criada');
    } catch (error) {
      console.log('  ‚ö†Ô∏è  Fun√ß√£o approval_status:', error.message);
    }

    // Fun√ß√£o para verificar se √© admin
    try {
      await prisma.$executeRawUnsafe(`
        CREATE OR REPLACE FUNCTION is_current_user_admin()
        RETURNS BOOLEAN AS $$
        DECLARE
          clerk_id TEXT;
        BEGIN
          -- Extrair clerkId do JWT
          clerk_id := (SELECT auth.jwt() ->> 'sub');
          
          IF clerk_id IS NULL THEN
            RETURN FALSE;
          END IF;
          
          -- Verificar se tem role 'ADMIN' no JWT
          IF (auth.jwt() -> 'public_metadata' ->> 'role') = 'ADMIN' THEN
            RETURN TRUE;
          END IF;
          
          -- Verificar metadata de aprova√ß√£o status tamb√©m
          IF (auth.jwt() -> 'public_metadata' ->> 'approvalStatus') = 'ADMIN' THEN
            RETURN TRUE;
          END IF;
          
          RETURN FALSE;
        END;
        $$ LANGUAGE plpgsql SECURITY DEFINER;
      `);
      console.log('  ‚úÖ Fun√ß√£o is_current_user_admin criada');
    } catch (error) {
      console.log('  ‚ö†Ô∏è  Fun√ß√£o admin_check:', error.message);
    }

    // ==================================================
    // 3. POL√çTICAS RESTRITIVAS PRINCIPAIS
    // ==================================================
    console.log('\nüìã 3. CRIANDO POL√çTICAS RESTRITIVAS...');

    const restrictivePolicies = [
      {
        name: 'restrict_pending_users_global',
        table: 'Client',
        sql: `CREATE POLICY "restrict_pending_users_global" ON "Client" AS RESTRICTIVE
          FOR ALL USING (
            CASE 
              WHEN is_current_user_admin() THEN TRUE
              WHEN get_current_user_approval_status() = 'APPROVED' THEN TRUE
              WHEN get_current_user_approval_status() = 'PENDING' THEN FALSE
              ELSE FALSE
            END
          );`
      },
      {
        name: 'restrict_pending_users_strategic_planning',
        table: 'StrategicPlanning',
        sql: `CREATE POLICY "restrict_pending_users_strategic_planning" ON "StrategicPlanning" AS RESTRICTIVE
          FOR ALL USING (
            CASE 
              WHEN is_current_user_admin() THEN TRUE
              WHEN get_current_user_approval_status() = 'APPROVED' THEN TRUE
              WHEN get_current_user_approval_status() = 'PENDING' THEN FALSE
              ELSE FALSE
            END
          );`
      },
      {
        name: 'restrict_pending_users_commercial_proposal',
        table: 'CommercialProposal',
        sql: `CREATE POLICY "restrict_pending_users_commercial_proposal" ON "CommercialProposal" AS RESTRICTIVE
          FOR ALL USING (
            CASE 
              WHEN is_current_user_admin() THEN TRUE
              WHEN get_current_user_approval_status() = 'APPROVED' THEN TRUE
              WHEN get_current_user_approval_status() = 'PENDING' THEN FALSE
              ELSE FALSE
            END
          );`
      },
      {
        name: 'restrict_pending_users_credit_transaction',
        table: 'CreditTransaction',
        sql: `CREATE POLICY "restrict_pending_users_credit_transaction" ON "CreditTransaction" AS RESTRICTIVE
          FOR ALL USING (
            CASE 
              WHEN is_current_user_admin() THEN TRUE
              WHEN get_current_user_approval_status() = 'APPROVED' THEN TRUE
              WHEN get_current_user_approval_status() = 'PENDING' THEN FALSE
              ELSE FALSE
            END
          );`
      }
    ];

    for (const policy of restrictivePolicies) {
      try {
        await prisma.$executeRawUnsafe(policy.sql);
        console.log(`  ‚úÖ Pol√≠tica restritiva criada: ${policy.name} em ${policy.table}`);
      } catch (error) {
        if (error.message.includes('already exists')) {
          console.log(`  ‚ö†Ô∏è  Pol√≠tica ${policy.name} j√° existe`);
        } else {
          console.log(`  ‚ùå Pol√≠tica ${policy.name}:`, error.message);
        }
      }
    }

    // ==================================================
    // 4. POL√çTICAS ESPEC√çFICAS PARA USU√ÅRIOS PENDING
    // ==================================================
    console.log('\nüìã 4. CRIANDO POL√çTICAS PARA USU√ÅRIOS PENDING...');

    const pendingPolicies = [
      {
        name: 'pending_users_own_profile_only',
        sql: `CREATE POLICY "pending_users_own_profile_only" ON "User"
          FOR SELECT USING (
            CASE
              WHEN is_current_user_admin() THEN TRUE
              WHEN id = get_user_id_from_clerk() THEN TRUE
              ELSE FALSE
            END
          );`
      },
      {
        name: 'pending_users_limited_profile_update',
        sql: `CREATE POLICY "pending_users_limited_profile_update" ON "User"
          FOR UPDATE USING (
            id = get_user_id_from_clerk() AND 
            get_current_user_approval_status() IN ('PENDING', 'APPROVED')
          )
          WITH CHECK (
            id = get_user_id_from_clerk() AND
            OLD."approvalStatus" = NEW."approvalStatus" AND
            OLD."approvedAt" IS NOT DISTINCT FROM NEW."approvedAt" AND
            OLD."approvedBy" IS NOT DISTINCT FROM NEW."approvedBy" AND
            OLD."rejectedAt" IS NOT DISTINCT FROM NEW."rejectedAt" AND
            OLD."rejectedBy" IS NOT DISTINCT FROM NEW."rejectedBy" AND
            OLD."rejectionReason" IS NOT DISTINCT FROM NEW."rejectionReason" AND
            OLD."version" = NEW."version"
          );`
      }
    ];

    for (const policy of pendingPolicies) {
      try {
        await prisma.$executeRawUnsafe(policy.sql);
        console.log(`  ‚úÖ Pol√≠tica pending criada: ${policy.name}`);
      } catch (error) {
        if (error.message.includes('already exists')) {
          console.log(`  ‚ö†Ô∏è  Pol√≠tica ${policy.name} j√° existe`);
        } else {
          console.log(`  ‚ùå Pol√≠tica ${policy.name}:`, error.message);
        }
      }
    }

    // ==================================================
    // 5. POL√çTICAS PARA MODERA√á√ÉO (ADMINS)
    // ==================================================
    console.log('\nüìã 5. CRIANDO POL√çTICAS PARA ADMINS...');

    const adminPolicies = [
      {
        name: 'admins_view_all_users_for_moderation',
        sql: `CREATE POLICY "admins_view_all_users_for_moderation" ON "User"
          FOR SELECT USING (is_current_user_admin());`
      },
      {
        name: 'admins_can_moderate_users',
        sql: `CREATE POLICY "admins_can_moderate_users" ON "User"
          FOR UPDATE USING (is_current_user_admin())
          WITH CHECK (is_current_user_admin());`
      }
    ];

    for (const policy of adminPolicies) {
      try {
        await prisma.$executeRawUnsafe(policy.sql);
        console.log(`  ‚úÖ Pol√≠tica admin criada: ${policy.name}`);
      } catch (error) {
        if (error.message.includes('already exists')) {
          console.log(`  ‚ö†Ô∏è  Pol√≠tica ${policy.name} j√° existe`);
        } else {
          console.log(`  ‚ùå Pol√≠tica ${policy.name}:`, error.message);
        }
      }
    }

    // ==================================================
    // 6. POL√çTICAS PARA AUDIT TRAIL
    // ==================================================
    console.log('\nüìã 6. CRIANDO POL√çTICAS PARA AUDIT TRAIL...');

    const auditPolicies = [
      {
        name: 'admins_view_all_moderation_logs',
        sql: `CREATE POLICY "admins_view_all_moderation_logs" ON "UserModerationLog"
          FOR SELECT USING (is_current_user_admin());`
      },
      {
        name: 'admins_create_moderation_logs',
        sql: `CREATE POLICY "admins_create_moderation_logs" ON "UserModerationLog"
          FOR INSERT WITH CHECK (is_current_user_admin());`
      },
      {
        name: 'users_view_own_moderation_logs',
        sql: `CREATE POLICY "users_view_own_moderation_logs" ON "UserModerationLog"
          FOR SELECT USING (
            "userId" = get_user_id_from_clerk() OR
            is_current_user_admin()
          );`
      }
    ];

    for (const policy of auditPolicies) {
      try {
        await prisma.$executeRawUnsafe(policy.sql);
        console.log(`  ‚úÖ Pol√≠tica audit criada: ${policy.name}`);
      } catch (error) {
        if (error.message.includes('already exists')) {
          console.log(`  ‚ö†Ô∏è  Pol√≠tica ${policy.name} j√° existe`);
        } else {
          console.log(`  ‚ùå Pol√≠tica ${policy.name}:`, error.message);
        }
      }
    }

    // ==================================================
    // 7. POL√çTICA DE EMERG√äNCIA
    // ==================================================
    console.log('\nüìã 7. CRIANDO POL√çTICA DE EMERG√äNCIA...');

    try {
      await prisma.$executeRawUnsafe(`
        CREATE POLICY "emergency_super_admin_override" ON "User"
          FOR ALL USING (
            (auth.jwt() -> 'public_metadata' ->> 'role') = 'SUPER_ADMIN'
          );
      `);
      console.log('  ‚úÖ Pol√≠tica emergency_super_admin_override criada');
    } catch (error) {
      if (error.message.includes('already exists')) {
        console.log('  ‚ö†Ô∏è  Pol√≠tica emergency j√° existe');
      } else {
        console.log('  ‚ùå Pol√≠tica emergency:', error.message);
      }
    }

    console.log('\nüéâ APLICA√á√ÉO DE POL√çTICAS RLS CONCLU√çDA!');

  } catch (error) {
    console.error('\n‚ùå ERRO GERAL:', error.message);
    throw error;
  }
}

// ==================================================
// FUN√á√ÉO PARA TESTAR POL√çTICAS RLS
// ==================================================
async function testRLSPoliciesFixed() {
  console.log('\nüß™ TESTANDO POL√çTICAS RLS...');

  try {
    // Teste 1: Verificar se as fun√ß√µes foram criadas
    console.log('\nüìã Teste 1: Verificando fun√ß√µes auxiliares...');

    try {
      const functions = await prisma.$queryRaw`
        SELECT proname FROM pg_proc 
        WHERE proname IN ('get_current_user_approval_status', 'is_current_user_admin', 'get_user_id_from_clerk');
      `;
      console.log('  ‚úÖ Fun√ß√µes encontradas:', functions.length);
      functions.forEach(fn => console.log(`    - ${fn.proname}`));
    } catch (error) {
      console.log('  ‚ö†Ô∏è  Erro ao verificar fun√ß√µes:', error.message);
    }

    // Teste 2: Verificar pol√≠ticas RLS
    console.log('\nüìã Teste 2: Verificando pol√≠ticas RLS...');

    try {
      const policies = await prisma.$queryRaw`
        SELECT schemaname, tablename, policyname, permissive, cmd
        FROM pg_policies 
        WHERE policyname LIKE '%pending%' OR policyname LIKE '%admin%' OR policyname LIKE '%emergency%' OR policyname LIKE '%restrict%'
        ORDER BY tablename, policyname;
      `;
      console.log('  ‚úÖ Pol√≠ticas RLS encontradas:', policies.length);
      policies.forEach(policy => {
        const permissive = policy.permissive === 'PERMISSIVE' ? '‚úÖ' : 'üîí';
        console.log(`    ${permissive} ${policy.tablename}.${policy.policyname} (${policy.cmd})`);
      });
    } catch (error) {
      console.log('  ‚ö†Ô∏è  Erro ao verificar pol√≠ticas:', error.message);
    }

    // Teste 3: Verificar RLS habilitado nas tabelas
    console.log('\nüìã Teste 3: Verificando RLS habilitado...');

    try {
      const rlsStatus = await prisma.$queryRaw`
        SELECT schemaname, tablename, rowsecurity 
        FROM pg_tables 
        WHERE tablename IN ('User', 'Client', 'StrategicPlanning', 'CommercialProposal', 'UserModerationLog', 'CreditTransaction')
        ORDER BY tablename;
      `;
      console.log('  ‚úÖ Status RLS das tabelas:');
      rlsStatus.forEach(table => {
        const status = table.rowsecurity ? 'üîí HABILITADO' : 'üîì DESABILITADO';
        console.log(`    - ${table.tablename}: ${status}`);
      });
    } catch (error) {
      console.log('  ‚ö†Ô∏è  Erro ao verificar RLS:', error.message);
    }

    // Teste 4: Contar pol√≠ticas por tabela
    console.log('\nüìã Teste 4: Contagem de pol√≠ticas por tabela...');

    try {
      const policyCount = await prisma.$queryRaw`
        SELECT tablename, COUNT(*) as policy_count
        FROM pg_policies 
        WHERE tablename IN ('User', 'Client', 'StrategicPlanning', 'CommercialProposal', 'UserModerationLog', 'CreditTransaction')
        GROUP BY tablename
        ORDER BY tablename;
      `;
      console.log('  ‚úÖ Pol√≠ticas por tabela:');
      policyCount.forEach(table => {
        console.log(`    - ${table.tablename}: ${table.policy_count} pol√≠ticas`);
      });
    } catch (error) {
      console.log('  ‚ö†Ô∏è  Erro ao contar pol√≠ticas:', error.message);
    }

    console.log('\n‚úÖ TESTES DE POL√çTICAS RLS CONCLU√çDOS');

  } catch (error) {
    console.error('‚ùå Erro nos testes:', error.message);
  }
}

// ==================================================
// FUN√á√ÉO PARA CRIAR USU√ÅRIO DE TESTE
// ==================================================
async function createTestUserForSecurity() {
  console.log('\nüß™ CRIANDO USU√ÅRIO DE TESTE PARA VALIDA√á√ÉO...');

  try {
    // Criar usu√°rio PENDING para testes
    const testUser = await prisma.user.create({
      data: {
        clerkId: 'test_user_pending_' + Date.now(),
        email: 'test.pending@example.com',
        firstName: 'Test',
        lastName: 'Pending',
        approvalStatus: 'PENDING',
        creditBalance: 0
      }
    });

    console.log('  ‚úÖ Usu√°rio de teste PENDING criado:', testUser.id);

    // Criar usu√°rio APPROVED para testes
    const approvedUser = await prisma.user.create({
      data: {
        clerkId: 'test_user_approved_' + Date.now(),
        email: 'test.approved@example.com',
        firstName: 'Test',
        lastName: 'Approved',
        approvalStatus: 'APPROVED',
        creditBalance: 100
      }
    });

    console.log('  ‚úÖ Usu√°rio de teste APPROVED criado:', approvedUser.id);
    console.log('  üìã Usu√°rios criados para valida√ß√£o de seguran√ßa');

  } catch (error) {
    console.log('  ‚ö†Ô∏è  Erro ao criar usu√°rios de teste:', error.message);
  }
}

// Executar aplica√ß√£o
(async () => {
  try {
    await applyRLSPoliciesPrismaFixed();
    await testRLSPoliciesFixed();
    await createTestUserForSecurity();

    console.log('\n' + '='.repeat(60));
    console.log('‚úÖ PHASE 2 - APLICA√á√ÉO RLS VIA PRISMA CONCLU√çDA COM SUCESSO');
    console.log('='.repeat(60));

  } catch (error) {
    console.error('\n‚ùå ERRO GERAL:', error.message);
  } finally {
    await prisma.$disconnect();
  }
})(); 