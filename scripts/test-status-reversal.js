#!/usr/bin/env node

/**
 * üß™ TESTE DE REVERS√ÉO DE STATUS: APPROVED ‚Üí PENDING
 * 
 * Este script demonstra como o middleware se comporta quando
 * um usu√°rio aprovado tem seu status revertido para pending
 */

const { createClerkClient } = require('@clerk/backend');

// Cores para logs
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
  magenta: '\x1b[35m'
};

function log(message, color = 'white') {
  const timestamp = new Date().toISOString();
  const coloredMessage = `${colors[color] || ''}${message}${colors.reset}`;
  console.log(`[${timestamp}] ${coloredMessage}`);
}

function explainMiddlewareLogic() {
  log('üîç L√ìGICA DO MIDDLEWARE PARA MUDAN√áAS DE STATUS', 'cyan');
  log('='.repeat(70), 'cyan');
  
  log('\nüìã COMO O MIDDLEWARE FUNCIONA:', 'yellow');
  log('1. Usu√°rio tenta acessar qualquer rota protegida', 'white');
  log('2. Middleware consulta Clerk diretamente (fallback)', 'white');
  log('3. Obt√©m status ATUAL do usu√°rio em tempo real', 'white');
  log('4. Toma decis√£o baseada no status ATUAL', 'white');
  
  log('\nüîÑ CEN√ÅRIOS DE MUDAN√áA DE STATUS:', 'blue');
  
  log('\n‚¨ÜÔ∏è CASO 1: PENDING ‚Üí APPROVED', 'green');
  log('‚Ä¢ Clerk metadata: approvalStatus: "APPROVED"', 'white');
  log('‚Ä¢ Middleware fallback: detecta APPROVED', 'white');
  log('‚Ä¢ A√ß√£o: Permite acesso √† aplica√ß√£o ‚úÖ', 'white');
  log('‚Ä¢ Resultado: Usu√°rio √© redirecionado para dashboard', 'white');
  
  log('\n‚¨áÔ∏è CASO 2: APPROVED ‚Üí PENDING', 'yellow');
  log('‚Ä¢ Admin reverte status do usu√°rio para PENDING', 'white');
  log('‚Ä¢ Clerk metadata: approvalStatus: "PENDING"', 'white');
  log('‚Ä¢ Middleware fallback: detecta PENDING', 'white');
  log('‚Ä¢ A√ß√£o: BLOQUEIA acesso ‚ùå', 'white');
  log('‚Ä¢ Resultado: Usu√°rio √© redirecionado para /pending-approval', 'white');
  
  log('\n‚¨áÔ∏è CASO 3: APPROVED ‚Üí REJECTED', 'red');
  log('‚Ä¢ Admin rejeita usu√°rio', 'white');
  log('‚Ä¢ Clerk metadata: approvalStatus: "REJECTED"', 'white');
  log('‚Ä¢ Middleware fallback: detecta REJECTED', 'white');
  log('‚Ä¢ A√ß√£o: BLOQUEIA acesso ‚ùå', 'white');
  log('‚Ä¢ Resultado: Usu√°rio √© redirecionado para /account-rejected', 'white');
  
  log('\n‚¨áÔ∏è CASO 4: APPROVED ‚Üí SUSPENDED', 'red');
  log('‚Ä¢ Admin suspende usu√°rio', 'white');
  log('‚Ä¢ Clerk metadata: approvalStatus: "SUSPENDED"', 'white');
  log('‚Ä¢ Middleware fallback: detecta SUSPENDED', 'white');
  log('‚Ä¢ A√ß√£o: BLOQUEIA acesso ‚ùå', 'white');
  log('‚Ä¢ Resultado: Usu√°rio √© redirecionado para /account-suspended', 'white');
}

function showMiddlewareCode() {
  log('\nüíª C√ìDIGO DO MIDDLEWARE (L√ìGICA DE DECIS√ÉO):', 'cyan');
  log('='.repeat(60), 'cyan');
  
  log('\n```typescript', 'blue');
  log('// üöÄ FALLBACK: Consulta Clerk diretamente', 'blue');
  log('const directStatus = await getApprovalStatusDirect(userId);', 'blue');
  log('approvalStatus = directStatus.approvalStatus; // EM TEMPO REAL!', 'blue');
  log('', 'blue');
  log('// ‚ö° VERIFICA√á√ÉO POR STATUS:', 'blue');
  log('switch (approvalStatus) {', 'blue');
  log('  case "APPROVED":', 'blue');
  log('    // ‚úÖ Permite acesso - redireciona para home se em pending', 'blue');
  log('    return NextResponse.next()', 'blue');
  log('', 'blue');
  log('  case "PENDING":', 'blue');
  log('    // ‚ùå BLOQUEIA - redireciona para /pending-approval', 'blue');
  log('    return NextResponse.redirect("/pending-approval")', 'blue');
  log('', 'blue');
  log('  case "REJECTED":', 'blue');
  log('    // ‚ùå BLOQUEIA - redireciona para /account-rejected', 'blue');
  log('    return NextResponse.redirect("/account-rejected")', 'blue');
  log('', 'blue');
  log('  case "SUSPENDED":', 'blue');
  log('    // ‚ùå BLOQUEIA - redireciona para /account-suspended', 'blue');
  log('    return NextResponse.redirect("/account-suspended")', 'blue');
  log('}', 'blue');
  log('```', 'blue');
}

async function simulateStatusChange() {
  log('\nüé≠ SIMULA√á√ÉO: MUDAN√áA DE STATUS EM TEMPO REAL', 'cyan');
  log('='.repeat(60), 'cyan');
  
  const clerkSecretKey = process.env.CLERK_SECRET_KEY || 'sk_test_Hft6sPddyXw0Bfw7vaYJYQlKnr07dukEc6LIkeuG5O';
  const userId = 'user_2xcFWfxqWjHinbasVVVL1j4e4aB';
  
  try {
    const clerk = createClerkClient({ secretKey: clerkSecretKey });
    const user = await clerk.users.getUser(userId);
    
    const currentStatus = user.publicMetadata.approvalStatus;
    
    log('\nüìä STATUS ATUAL:', 'blue');
    log(`‚Ä¢ Usu√°rio: ${user.emailAddresses[0]?.emailAddress}`, 'white');
    log(`‚Ä¢ Status atual: ${currentStatus}`, 'white');
    log(`‚Ä¢ Role: ${user.publicMetadata.role}`, 'white');
    
    log('\nüîÆ SIMULA√á√ÉO DE CEN√ÅRIOS:', 'yellow');
    
    const scenarios = [
      {
        newStatus: 'PENDING',
        action: 'Admin reverte para PENDING',
        middlewareAction: 'BLOQUEIA acesso - redireciona para /pending-approval',
        userExperience: 'Usu√°rio √© imediatamente bloqueado',
        color: 'yellow'
      },
      {
        newStatus: 'REJECTED', 
        action: 'Admin rejeita usu√°rio',
        middlewareAction: 'BLOQUEIA acesso - redireciona para /account-rejected',
        userExperience: 'Usu√°rio v√™ p√°gina de conta rejeitada',
        color: 'red'
      },
      {
        newStatus: 'SUSPENDED',
        action: 'Admin suspende usu√°rio', 
        middlewareAction: 'BLOQUEIA acesso - redireciona para /account-suspended',
        userExperience: 'Usu√°rio v√™ p√°gina de conta suspensa',
        color: 'red'
      },
      {
        newStatus: 'APPROVED',
        action: 'Admin aprova novamente',
        middlewareAction: 'LIBERA acesso - permite navega√ß√£o',
        userExperience: 'Usu√°rio recupera acesso imediato',
        color: 'green'
      }
    ];
    
    scenarios.forEach((scenario, index) => {
      log(`\nüìã CEN√ÅRIO ${index + 1}: ${scenario.action}`, scenario.color);
      log(`   Novo status: ${scenario.newStatus}`, 'white');
      log(`   Middleware: ${scenario.middlewareAction}`, 'white');
      log(`   Experi√™ncia: ${scenario.userExperience}`, 'white');
    });
    
  } catch (error) {
    log(`‚ùå Erro na simula√ß√£o: ${error.message}`, 'red');
  }
}

function explainRealTimeProtection() {
  log('\nüõ°Ô∏è PROTE√á√ÉO EM TEMPO REAL', 'cyan');
  log('='.repeat(40), 'cyan');
  
  log('\n‚úÖ VANTAGENS DO MIDDLEWARE FALLBACK:', 'green');
  log('‚Ä¢ Consulta SEMPRE o status atual no Clerk', 'white');
  log('‚Ä¢ N√ÉO depende de cache ou banco desatualizado', 'white');
  log('‚Ä¢ Mudan√ßas de status s√£o aplicadas IMEDIATAMENTE', 'white');
  log('‚Ä¢ Sistema de seguran√ßa em tempo real', 'white');
  log('‚Ä¢ Zero lat√™ncia para altera√ß√µes de permiss√£o', 'white');
  
  log('\n‚ö° TIMELINE DE MUDAN√áA:', 'yellow');
  log('1. Admin altera status no painel ‚Üí IMEDIATO', 'white');
  log('2. Clerk atualiza metadata ‚Üí IMEDIATO', 'white');
  log('3. Pr√≥xima requisi√ß√£o do usu√°rio ‚Üí IMEDIATO', 'white');
  log('4. Middleware consulta Clerk ‚Üí IMEDIATO', 'white');
  log('5. Novo status aplicado ‚Üí IMEDIATO', 'white');
  log('6. Usu√°rio redirecionado ‚Üí IMEDIATO', 'white');
  
  log('\nüéØ TEMPO TOTAL: < 1 SEGUNDO! ‚ö°', 'green');
}

function realWorldExample() {
  log('\nüåç EXEMPLO DO MUNDO REAL:', 'cyan');
  log('='.repeat(40), 'cyan');
  
  log('\nüìÖ TER√áA-FEIRA 10:00:', 'blue');
  log('‚Ä¢ Usu√°rio est√° navegando normalmente na aplica√ß√£o', 'white');
  log('‚Ä¢ Status: APPROVED', 'green');
  
  log('\nüìÖ TER√áA-FEIRA 10:15:', 'blue');
  log('‚Ä¢ Admin detecta atividade suspeita', 'white');
  log('‚Ä¢ Admin suspende o usu√°rio via painel', 'white');
  log('‚Ä¢ Status muda para: SUSPENDED', 'red');
  
  log('\nüìÖ TER√áA-FEIRA 10:15:30 (30 segundos depois):', 'blue');
  log('‚Ä¢ Usu√°rio clica em qualquer link na aplica√ß√£o', 'white');
  log('‚Ä¢ Middleware detecta status SUSPENDED', 'white');
  log('‚Ä¢ Usu√°rio √© IMEDIATAMENTE redirecionado para /account-suspended', 'red');
  log('‚Ä¢ Acesso bloqueado instantaneamente! üö´', 'white');
  
  log('\nüìÖ TER√áA-FEIRA 11:00:', 'blue');
  log('‚Ä¢ Ap√≥s investiga√ß√£o, admin remove suspens√£o', 'white');
  log('‚Ä¢ Status volta para: APPROVED', 'green');
  log('‚Ä¢ Usu√°rio faz logout/login', 'white');
  log('‚Ä¢ Acesso restaurado imediatamente! ‚úÖ', 'white');
  
  log('\nüí° CONCLUS√ÉO:', 'green');
  log('Sistema de seguran√ßa em tempo real funcionando perfeitamente! üõ°Ô∏è', 'white');
}

async function main() {
  explainMiddlewareLogic();
  showMiddlewareCode();
  await simulateStatusChange();
  explainRealTimeProtection();
  realWorldExample();
  
  log('\nüéØ RESPOSTA √Ä SUA PERGUNTA:', 'magenta');
  log('='.repeat(50), 'magenta');
  
  log('\n‚úÖ SIM, o usu√°rio seria bloqueado IMEDIATAMENTE!', 'green');
  log('‚Ä¢ Middleware consulta Clerk a cada requisi√ß√£o', 'white');
  log('‚Ä¢ Detecta mudan√ßa de APPROVED ‚Üí PENDING', 'white');
  log('‚Ä¢ Redireciona automaticamente para /pending-approval', 'white');
  log('‚Ä¢ Tempo de resposta: < 1 segundo', 'white');
  
  log('\nüõ°Ô∏è SISTEMA DE PROTE√á√ÉO EM TEMPO REAL:', 'cyan');
  log('‚Ä¢ Mudan√ßas de status aplicadas instantaneamente', 'white');
  log('‚Ä¢ Seguran√ßa m√°xima contra acessos indevidos', 'white');
  log('‚Ä¢ Experi√™ncia de usu√°rio consistente', 'white');
  
  log('\nüöÄ RESULTADO: SISTEMA 100% SEGURO! üéâ', 'green');
}

if (require.main === module) {
  main().catch(error => {
    log(`‚ùå Erro fatal: ${error.message}`, 'red');
    process.exit(1);
  });
}

module.exports = { explainMiddlewareLogic, simulateStatusChange }; 